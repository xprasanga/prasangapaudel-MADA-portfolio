[
  {
    "objectID": "starter-analysis-exercise/results/tables-files/readme.html",
    "href": "starter-analysis-exercise/results/tables-files/readme.html",
    "title": "Prasanga Paudel's Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all tables (generally stored as Rds files) and other files.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/results/figures/readme.html",
    "href": "starter-analysis-exercise/results/figures/readme.html",
    "title": "Prasanga Paudel's Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all figures.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/products/readme.html",
    "href": "starter-analysis-exercise/products/readme.html",
    "title": "Prasanga Paudel's Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all the products of your project.\nFor a classical academic project, this will be a peer-reviewed manuscript, and should be placed into a manuscript folder.\nFor our case, since we’ll want to put it on the website, we call it a report.\nOften you need a library of references in bibtex format, as well as a CSL style file that determines reference formatting. Since those files might be used by several of the products, I’m placing them in the main products folder. Feel free to re-organize."
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/readme.html",
    "href": "starter-analysis-exercise/data/raw-data/readme.html",
    "title": "Prasanga Paudel's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains a simple made-up data-set in an Excel file.\nIt contains the variables Height, Weight and Gender of a few imaginary individuals.\nThe dataset purposefully contains some faulty entries that need to be cleaned.\nGenerally, any dataset should contain some meta-data explaining what each variable in the dataset is. (This is often called a Codebook.) For this simple example, the codebook is given as a second sheet in the Excel file.\nThis raw data-set should generally not be edited by hand. It should instead be loaded and processed/cleaned using code."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/readme.html",
    "href": "starter-analysis-exercise/code/processing-code/readme.html",
    "title": "Prasanga Paudel's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code for processing data.\nCurrently, there is just a single Quarto file to illustrate how the processing can look like.\nInstead of a Quarto file that contains code, it is also possible to use R scripts or a combination of R scripts and Quarto code. Those approaches are illustrated in the full dataanalysis-template repository."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at /Users/annalisecramer/MADA/prasangapaudel-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 3 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 3\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n\nsummary(rawdata)\n\n    Height              Weight          Gender         \n Length:14          Min.   :  45.0   Length:14         \n Class :character   1st Qu.:  55.0   Class :character  \n Mode  :character   Median :  70.0   Mode  :character  \n                    Mean   : 602.7                     \n                    3rd Qu.:  90.0                     \n                    Max.   :7000.0                     \n                    NA's   :1                          \n\nhead(rawdata)\n\n# A tibble: 6 × 3\n  Height Weight Gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 180        80 M     \n2 175        70 O     \n3 sixty      60 F     \n4 178        76 F     \n5 192        90 NA    \n6 6          55 F     \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda2.html",
    "href": "starter-analysis-exercise/code/eda-code/eda2.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at /Users/annalisecramer/MADA/prasangapaudel-MADA-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          5     \n_______________________          \nColumn type frequency:           \n  character                1     \n  factor                   1     \n  numeric                  3     \n________________________         \nGroup variables            None  \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate min max empty n_unique whitespace\n1 Country               0             1   6  24     0        3          0\n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean    sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0  133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2   45  55  70  80  110 ▇▂▃▂▂\n3 Age                   0             1  28.9  8.99  18  22  30  32   47 ▆▂▇▁▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4)\n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\nBoxplot for Height vs Country\n\np5 &lt;- mydata %&gt;% ggplot(aes(x=Country, y=Height)) + geom_boxplot()\nplot(p5)\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\", \"results\", \"figures\", \"Height-vs-Country.png\")\nggsave(filename=figure_file, plot=p5)\n\nSaving 7 x 5 in image\n\n\nScatterplot for Age vs Weight\n\np6 &lt;- mydata %&gt;% ggplot(aes(x=Weight, y=Age)) + geom_point()\nplot(p6)\n\n\n\n\n\n\n\nfigure_file=here(\"starter-analysis-exercise\", \"results\", \"figures\", \"Age-vs-Weight.png\")\nggsave(filename = figure_file, plot=p6)\n\nSaving 7 x 5 in image\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/analysis-code/readme.html",
    "href": "starter-analysis-exercise/code/analysis-code/readme.html",
    "title": "Prasanga Paudel's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory analysis and statistical analysis on the processed/cleaned data. The code produces a few tables and figures, which are saved in the results folder.\nIt’s the same code done 3 times:\n\nFirst, there is an R script that you can run which does all the computations.\nSecond, there is a Quarto file which contains exactly the same code as the R script.\nThird, my current favorite, is a Quarto file with an approach where the code is pulled in from the R script and run.\n\nThe last version has the advantage of having code in one place for easy writing/debugging, and then being able to pull the code into the Quarto file for a nice combination of text/commentary and code.\nEach way of doing this is a reasonable approach, pick whichever one you prefer or makes the most sense for your setup. Whichever approach you choose, add ample documentation/commentary so you and others can easily understand what’s going on and what is done."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My website and data analysis portfolio",
    "section": "",
    "text": "This is a website I created for the MADA course\n\nHello\n\nMy name is Prasanga Paudel.\nWelcome to my website and data analysis portfolio.\n\nPlease use the Menu Bar above to look around.\nHave fun!"
  },
  {
    "objectID": "data-excercise/synthetic-data.html#setting-the-seeds-and-observation-number",
    "href": "data-excercise/synthetic-data.html#setting-the-seeds-and-observation-number",
    "title": "Generating Synthetic Data",
    "section": "2.1 Setting the seeds and observation number",
    "text": "2.1 Setting the seeds and observation number\nIn this section we will create the baseline for generating our synthetic data. We will set the seed so that we can create reproducible data, and we will also set the number of observations to 180.\n\n# Setting a seed for reproducibility of data\nset.seed(324)\n# Definining the number of observations (players) to generate\nn_obs &lt;- 180"
  },
  {
    "objectID": "data-excercise/synthetic-data.html#creating-an-empty-dataset",
    "href": "data-excercise/synthetic-data.html#creating-an-empty-dataset",
    "title": "Generating Synthetic Data",
    "section": "2.2 Creating an empty Dataset",
    "text": "2.2 Creating an empty Dataset\nWe will then create an empty dataset with just variable names and their data structure. We will make sure that every variable has the same number of obserations.\n\n# Create an empty data frame with placeholders for variables\ndata &lt;- data.frame(\n  userID = numeric(n_obs),\n  Age = numeric(n_obs),\n  Gender = character(n_obs),\n  Country = character(n_obs),\n  InstallationDate = lubridate::as_date(character(n_obs)),\n  PlayTime = numeric(n_obs),\n  PointsEarned = numeric(n_obs),\n  POTY = integer(n_obs)\n)\n\nWe can confirm that the new dataset “data” is formed successfully."
  },
  {
    "objectID": "data-excercise/synthetic-data.html#figure1-boxplot-of-country-vs-points-earned",
    "href": "data-excercise/synthetic-data.html#figure1-boxplot-of-country-vs-points-earned",
    "title": "Generating Synthetic Data",
    "section": "5.1 Figure1: Boxplot of Country vs Points Earned",
    "text": "5.1 Figure1: Boxplot of Country vs Points Earned\nWe observe that there is no statistical difference across countries for points earned as we created these variables with randoness. All countries seem to have the mean in the same range with different variation within the data.\n\n# ggplot2 boxplot for PointsEarned by Country group\nggplot(data, aes(x = Country, y = PointsEarned)) +\n  geom_boxplot() +\n  labs(x = \"Country of Origin\", y = \"Points earned by the player\") +\n  theme_bw()"
  },
  {
    "objectID": "data-excercise/synthetic-data.html#figure2-boxplot-of-gender-vs-points-earned",
    "href": "data-excercise/synthetic-data.html#figure2-boxplot-of-gender-vs-points-earned",
    "title": "Generating Synthetic Data",
    "section": "5.2 Figure2: Boxplot of Gender vs Points Earned",
    "text": "5.2 Figure2: Boxplot of Gender vs Points Earned\nWe can again observe that there is no statistical difference across Gender for points earned as we created these variables with randoness as well. Both male and female seem to have the mean in the same range with different variation within the group.\n\n# ggplot2 boxplot for PointsEarned by Country group\nggplot(data, aes(x = Gender, y = PointsEarned)) +\n  geom_boxplot() +\n  labs(x = \"Gender\", y = \"Points earned by the player\") +\n  theme_bw()"
  },
  {
    "objectID": "data-excercise/synthetic-data.html#figure-3-scatterplot-of-life-expectancy-vs-population-size",
    "href": "data-excercise/synthetic-data.html#figure-3-scatterplot-of-life-expectancy-vs-population-size",
    "title": "Generating Synthetic Data",
    "section": "5.3 Figure 3: Scatterplot of Life Expectancy vs Population Size",
    "text": "5.3 Figure 3: Scatterplot of Life Expectancy vs Population Size\nWe observe the points earned by the player is going up as the playing time is increasing, this is because we have created the data to follow this pattern. As we set the slope to a positive 5, the data has been generated with a positive correlation.\n\n# Create scatterplot with a red regression line\nggplot(data, aes(x = PlayTime, y = PointsEarned)) + #setting variables to different axis\n  geom_point(color = \"darkgreen\", alpha = 0.7) + geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\nlabs(\n    title = \"Scatterplot of Play Time vs Points Earned\", # giving a title to the figure\n    x = \"Play Time\", #labeling the axis\n    y = \"Points earned\" #labeling the axis\n  ) +\n  theme_minimal()\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "data-excercise/synthetic-data.html#table-1-fitting-a-linear-model-to-test-the-results-in-figure-3",
    "href": "data-excercise/synthetic-data.html#table-1-fitting-a-linear-model-to-test-the-results-in-figure-3",
    "title": "Generating Synthetic Data",
    "section": "5.4 Table 1: Fitting a linear model to test the results in Figure 3",
    "text": "5.4 Table 1: Fitting a linear model to test the results in Figure 3\nWe will fit a linear regression model with the same x and y variable to see the statistical result and slope.\n\n# Fitting the linear model\nfit1 &lt;- lm(PointsEarned ~ PlayTime, data = data) # fit1 is a model with Age as predictor\nsummary(fit1)\n\n\nCall:\nlm(formula = PointsEarned ~ PlayTime, data = data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-335.18  -81.80    3.11   81.69  371.40 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  78.2272    28.4187   2.753  0.00652 ** \nPlayTime      4.6537     0.2742  16.971  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 132.1 on 178 degrees of freedom\nMultiple R-squared:  0.6181,    Adjusted R-squared:  0.6159 \nF-statistic:   288 on 1 and 178 DF,  p-value: &lt; 2.2e-16\n\n\nAs we can see the coefficient (+4), which is statistically significant, is around the slope we first set (+5). The data has been generated as per our direction."
  },
  {
    "objectID": "data-excercise/synthetic-data.html#figure-4-scatterplot-of-life-expectancy-vs-population-size",
    "href": "data-excercise/synthetic-data.html#figure-4-scatterplot-of-life-expectancy-vs-population-size",
    "title": "Generating Synthetic Data",
    "section": "5.5 Figure 4: Scatterplot of Life Expectancy vs Population Size",
    "text": "5.5 Figure 4: Scatterplot of Life Expectancy vs Population Size\nWe can observe that the points earned by the player is showing no relation with the playing time, this is because we did not set any relation between these variables and they were generated with randomness.\n\n# Creating scatterplot\nggplot(data, aes(x = Age, y = PointsEarned)) + #setting variables to different axis\n  geom_point(color = \"darkgreen\", alpha = 0.7) +\nlabs(\n    title = \"Scatterplot of Play Time vs Points Earned\", # giving a title to the figure\n    x = \"Age of the player\", #labeling the axis\n    y = \"Points earned by the player\" #labeling the axis\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "data-excercise/synthetic-data.html#table-1-fitting-a-linear-model-to-test-the-results-in-figure-4",
    "href": "data-excercise/synthetic-data.html#table-1-fitting-a-linear-model-to-test-the-results-in-figure-4",
    "title": "Generating Synthetic Data",
    "section": "5.6 Table 1: Fitting a linear model to test the results in Figure 4",
    "text": "5.6 Table 1: Fitting a linear model to test the results in Figure 4\nWe will fit a linear regression model with the same x and y variable to see the statistical result and slope.\n\n# Fit the linear model\nfit2 &lt;- lm(PointsEarned ~ Age, data = data) # fit1 is a model with Age as predictor\nsummary(fit2)\n\n\nCall:\nlm(formula = PointsEarned ~ Age, data = data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-537.22 -151.51   22.07  155.17  626.10 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  501.954     74.989   6.694 2.74e-10 ***\nAge            1.254      3.202   0.392    0.696    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 213.7 on 178 degrees of freedom\nMultiple R-squared:  0.0008613, Adjusted R-squared:  -0.004752 \nF-statistic: 0.1534 on 1 and 178 DF,  p-value: 0.6957\n\n\nWe can confirm that the relation between Age and Points earned is not statistically significant."
  },
  {
    "objectID": "data-excercise/synthetic-data.html#table-3-fitting-a-probit-model-for-player-of-the-year-nomination",
    "href": "data-excercise/synthetic-data.html#table-3-fitting-a-probit-model-for-player-of-the-year-nomination",
    "title": "Generating Synthetic Data",
    "section": "5.7 Table 3: Fitting a Probit model for Player of the Year Nomination",
    "text": "5.7 Table 3: Fitting a Probit model for Player of the Year Nomination\nWe will fit a probit regression model with Age, Playtime and Country as predictors to see if they influence the outcome of the POTY variable.As we have not set such relation between them, they should show no relation among them.\n\n# Fitting the probit model\nfit3 &lt;- glm(POTY ~ Age + PlayTime + Country, family = binomial(link = \"probit\"), data = data) # fit1 is a model with Age as predictor\nsummary(fit3)\n\n\nCall:\nglm(formula = POTY ~ Age + PlayTime + Country, family = binomial(link = \"probit\"), \n    data = data)\n\nCoefficients:\n                 Estimate Std. Error z value Pr(&gt;|z|)\n(Intercept)    -0.3633860  0.6441956  -0.564    0.573\nAge            -0.0325857  0.0235439  -1.384    0.166\nPlayTime       -0.0001208  0.0033010  -0.037    0.971\nCountryGermany  0.0744650  0.2923346   0.255    0.799\nCountryUSA      0.0617818  0.2874123   0.215    0.830\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 148.66  on 179  degrees of freedom\nResidual deviance: 146.57  on 175  degrees of freedom\nAIC: 156.57\n\nNumber of Fisher Scoring iterations: 5\n\n\nWe can verify from the results above that there is no such relation among the variables."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html",
    "href": "cdcdata-exercise/cdcdata-exercise.html",
    "title": "Data Analysis Excerise",
    "section": "",
    "text": "This exercise is based on CDC dataset."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#checking-for-missing-values",
    "href": "cdcdata-exercise/cdcdata-exercise.html#checking-for-missing-values",
    "title": "Data Analysis Excerise",
    "section": "2.1 Checking for missing values",
    "text": "2.1 Checking for missing values\n\n# Check for missing values (NA) within the dataset\nmissing_values &lt;- colSums(is.na(cdc_dataset))\nprint(missing_values) \n\n   LocationAbbr    LocationDesc            Year      Datasource       TopicDesc \n              0               0               0               0               0 \n    MeasureDesc      Data_Value Data_Value_Unit Data_Value_Type     GeoLocation \n              0               0               0               0               0 \n         Source     TopicTypeId         TopicId       MeasureId \n              0               0               0               0 \n\n\nWe can observe that there are 14 variables altogether and there are no missing values in the dataset. We will further check for any missing values coded as 9999 for any numeric variable. We will also use scatterplot to see if there is any such replacement for missing value which can be observed as an outlier. This can be observed later during the analysis."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#confirming-the-structure-of-the-dataset-through-observation-across-states",
    "href": "cdcdata-exercise/cdcdata-exercise.html#confirming-the-structure-of-the-dataset-through-observation-across-states",
    "title": "Data Analysis Excerise",
    "section": "2.2 Confirming the structure of the dataset through observation across States",
    "text": "2.2 Confirming the structure of the dataset through observation across States\n\n# Counting the number of observations per State\nstate_counts &lt;- cdc_dataset %&gt;%\n  count(LocationDesc)\n\n# View the result\nprint(state_counts)\n\n# A tibble: 51 × 2\n   LocationDesc             n\n   &lt;chr&gt;                &lt;int&gt;\n 1 Alabama                 50\n 2 Alaska                  50\n 3 Arizona                 50\n 4 Arkansas                50\n 5 California              50\n 6 Colorado                50\n 7 Connecticut             50\n 8 Delaware                50\n 9 District of Columbia    50\n10 Florida                 50\n# ℹ 41 more rows\n\n\nWe can confirm that every state has 50 oservations for each State from year 1970-2019, which makes perfect sense.\n\n#Preparing the dataset for replicable properties As the raw data itself is quite messy, we will try to make it as simple as possible to learn about their distribution. As this is a time-series data, we will focus on the “trend” rather than the distribution as normal. We will try to clean the data as much as possible so that we can observe consisteny in the result, making it easier to learn about the properties of the dataset."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#filtering-out-five-states-to-make-the-analysis-easy.",
    "href": "cdcdata-exercise/cdcdata-exercise.html#filtering-out-five-states-to-make-the-analysis-easy.",
    "title": "Data Analysis Excerise",
    "section": "2.3 Filtering out Five states to make the analysis easy.",
    "text": "2.3 Filtering out Five states to make the analysis easy.\nWe will filter five states from the dataset and make a new dataset based on these states, The next phases of analysis will include these states only: Georgia, Kansas, Idaho, Alabama and Nebraska.\n\n# Filter dataset for selected states\nfiltered_states &lt;- cdc_dataset %&gt;%\n  filter(LocationDesc %in% c(\"Georgia\", \"Kansas\", \"Idaho\", \"Alabama\", \"Nebraska\"))\n\n# View the first few rows of the new dataset\nhead(filtered_states)\n\n# A tibble: 6 × 14\n  LocationAbbr LocationDesc  Year Datasource TopicDesc    MeasureDesc Data_Value\n  &lt;chr&gt;        &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;        &lt;chr&gt;            &lt;dbl&gt;\n1 AL           Alabama       2019 OW         The Tax Bur… Cigarette …  165763113\n2 GA           Georgia       2019 OW         The Tax Bur… Cigarette …  168549095\n3 ID           Idaho         2019 OW         The Tax Bur… Cigarette …   35817868\n4 KS           Kansas        2019 OW         The Tax Bur… Cigarette …  116778114\n5 NE           Nebraska      2019 OW         The Tax Bur… Cigarette …   50168160\n6 AL           Alabama       2018 OW         The Tax Bur… Cigarette …  172649066\n# ℹ 7 more variables: Data_Value_Unit &lt;chr&gt;, Data_Value_Type &lt;chr&gt;,\n#   GeoLocation &lt;chr&gt;, Source &lt;chr&gt;, TopicTypeId &lt;chr&gt;, TopicId &lt;chr&gt;,\n#   MeasureId &lt;chr&gt;"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#filtering-out-the-variables-of-interest",
    "href": "cdcdata-exercise/cdcdata-exercise.html#filtering-out-the-variables-of-interest",
    "title": "Data Analysis Excerise",
    "section": "2.4 Filtering out the variables of interest",
    "text": "2.4 Filtering out the variables of interest\nIn this section, we will filter out only five variables so that we can look through the dataset more easily. We will set the name to this dataset as “dataset”.\n\n# Select only the required columns\ndataset &lt;- filtered_states %&gt;%\n  select(LocationDesc, LocationAbbr, Year, Data_Value, GeoLocation)\n\n# View the first few rows of the new dataset\nhead(dataset)\n\n# A tibble: 6 × 5\n  LocationDesc LocationAbbr  Year Data_Value GeoLocation                        \n  &lt;chr&gt;        &lt;chr&gt;        &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;                              \n1 Alabama      AL            2019  165763113 POINT (-86.631860762 32.840571122) \n2 Georgia      GA            2019  168549095 POINT (-83.627580346 32.839681093) \n3 Idaho        ID            2019   35817868 POINT (-114.363730042 43.682630005)\n4 Kansas       KS            2019  116778114 POINT (-98.200781227 38.3477403)   \n5 Nebraska     NE            2019   50168160 POINT (-99.365720623 41.6410409880…\n6 Alabama      AL            2018  172649066 POINT (-86.631860762 32.840571122)"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#scatter-plot-of-revenue-across-time-for-our-five-states.",
    "href": "cdcdata-exercise/cdcdata-exercise.html#scatter-plot-of-revenue-across-time-for-our-five-states.",
    "title": "Data Analysis Excerise",
    "section": "3.1 Scatter plot of Revenue across time for our five states.",
    "text": "3.1 Scatter plot of Revenue across time for our five states.\nWe will first use scatter plot to observe the property of our numeric variable Data_Value.\n\n# Defining the custom colors for each state so it is easy for us to observe\ncustom_colors &lt;- c(\"Georgia\" = \"red\", \n                   \"Kansas\" = \"blue\", \n                   \"Idaho\" = \"green\", \n                   \"Nebraska\" = \"purple\", \n                   \"Alabama\" = \"orange\")\n\n# Scatterplot of Year vs Data_Value\nggplot(dataset, aes(x = Year, y = Data_Value, color = LocationDesc)) +\n  geom_point(alpha = 0.6, size = 2) +\n  scale_color_manual(values = custom_colors) +\n  theme_minimal() +\n  labs(title = \"Scatterplot of Data_Value Over Time for Selected States\",\n       x = \"Year\",\n       y = \"Data Value\",\n       color = \"State\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nAs there is a sudden break in the pattern after the year 2000, we will remove these years from our dataset and create a new dataset based on years 1970-2000."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#scatter-plot-of-revenue-across-time-for-our-five-states.-1",
    "href": "cdcdata-exercise/cdcdata-exercise.html#scatter-plot-of-revenue-across-time-for-our-five-states.-1",
    "title": "Data Analysis Excerise",
    "section": "5.1 Scatter plot of Revenue across time for our five states.",
    "text": "5.1 Scatter plot of Revenue across time for our five states.\n\nggplot(data, aes(x = Year, y = Data_Value, #setting the axes\n                 color = LocationDesc)) +\n  geom_point(alpha = 0.6) +\n  geom_smooth(method = \"lm\", se = FALSE) +  # Adding a linear trend line\n  theme_minimal() +\n  labs(title = \"Trend of Revenue from Cigarette(in US$) Over Years by State\",\n       x = \"Year\",\n       y = \"Revenue Value\",\n       color = \"State\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nThis figure clearly shows the relation between the variables across time and States. This relation will be more clear if we use gregression analysis to calculate the slope. We will do that in next step. The scatter plot also confirms that there is no such missing value as encoded as 9999 otherwise we would have seen it as an outlier in our scatterplots."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#calculating-slope-or-association-through-regression",
    "href": "cdcdata-exercise/cdcdata-exercise.html#calculating-slope-or-association-through-regression",
    "title": "Data Analysis Excerise",
    "section": "5.2 Calculating Slope or association through Regression",
    "text": "5.2 Calculating Slope or association through Regression\nWe will now try to express the relation of revenue over time for Georgia.\n\n# Filtering data for Georgia\ngeorgia_data &lt;- dataset %&gt;% filter(LocationDesc == \"Georgia\")\n\n# Running linear regression based on georgia\ngeorgia_model &lt;- lm(Data_Value ~ Year, data = georgia_data)\n\n# Viewing regression summary for goergia\nsummary(georgia_model)\n\n\nCall:\nlm(formula = Data_Value ~ Year, data = georgia_data)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-62223438 -24447136   1385557  14666922  80405143 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -6.130e+09  6.714e+08  -9.131 4.55e-12 ***\nYear         3.133e+06  3.366e+05   9.308 2.51e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 34350000 on 48 degrees of freedom\nMultiple R-squared:  0.6435,    Adjusted R-squared:  0.6361 \nF-statistic: 86.64 on 1 and 48 DF,  p-value: 2.512e-12\n\n\nFurthermore, we will also express the relation for Alabama.\n\n# Filtering data for alabama\nalabama_data &lt;- dataset %&gt;% filter(LocationDesc == \"Alabama\")\n\n# Runing linear regression for alabama dataset\nalabama_model &lt;- lm(Data_Value ~ Year, data = alabama_data)\n\n# Viewing regression summary for alabama model\nsummary(alabama_model)\n\n\nCall:\nlm(formula = Data_Value ~ Year, data = alabama_data)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-50502109 -13652199   5184908  11116529  42297840 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -4.878e+09  4.319e+08  -11.29 4.06e-15 ***\nYear         2.491e+06  2.165e+05   11.51 2.12e-15 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 22100000 on 48 degrees of freedom\nMultiple R-squared:  0.7339,    Adjusted R-squared:  0.7283 \nF-statistic: 132.4 on 1 and 48 DF,  p-value: 2.117e-15\n\n\nFrom the two regression models above, the relation can be clearly observed and the properties of the datasets are clearly expressed."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#summary-of-revenue-across-the-five-states-of-the-final-dataset",
    "href": "cdcdata-exercise/cdcdata-exercise.html#summary-of-revenue-across-the-five-states-of-the-final-dataset",
    "title": "Data Analysis Excerise",
    "section": "5.3 Summary of Revenue across the five states of the final dataset",
    "text": "5.3 Summary of Revenue across the five states of the final dataset\nWe will will now provide the full statistical summary of revenue based on the States present in our dataset including the mean, meadian, maximum and the minimums.\n\n# Summarizing Data Value for five selected states\nsummary_data &lt;- data %&gt;%\n  filter(LocationDesc %in% c(\"Georgia\", \"Kansas\", \"Idaho\", \"Alabama\", \"Nebraska\")) %&gt;%\n  group_by(LocationDesc) %&gt;%\n  summarise(\n    count = n(), # provides no. of observation\n    mean = mean(Data_Value, na.rm = TRUE), # provides mean\n    median = median(Data_Value, na.rm = TRUE), #provides meadian\n    min = min(Data_Value, na.rm = TRUE), # provides minimum value\n    max = max(Data_Value, na.rm = TRUE), #provides max value\n    sd = sd(Data_Value, na.rm = TRUE) # provides standard deviation\n  )\n\n# Viewing the summary result\nprint(summary_data)\n\n# A tibble: 5 × 7\n  LocationDesc count      mean   median      min      max        sd\n  &lt;chr&gt;        &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 Alabama         31 64412390. 72144256 36739131 77175083 13404642.\n2 Georgia         31 80889810. 85549591 40789310 92494239 11900995.\n3 Idaho           31 13511795.  9777154  5142000 26264174  6580881.\n4 Kansas          31 43645409. 45327675 21175000 62374658 12755999.\n5 Nebraska        31 32675236. 31636000 12529000 48966120 10851763."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#summary-of-variables",
    "href": "cdcdata-exercise/cdcdata-exercise.html#summary-of-variables",
    "title": "Data Analysis Excerise",
    "section": "5.4 Summary of variables",
    "text": "5.4 Summary of variables\nThis table provides the overall summary of the final datset.\n\nsummary(data)\n\n LocationDesc       LocationAbbr            Year        Data_Value      \n Length:155         Length:155         Min.   :1970   Min.   : 5142000  \n Class :character   Class :character   1st Qu.:1977   1st Qu.:24687170  \n Mode  :character   Mode  :character   Median :1985   Median :45327675  \n                                       Mean   :1985   Mean   :47026928  \n                                       3rd Qu.:1993   3rd Qu.:72472412  \n                                       Max.   :2000   Max.   :92494239  \n GeoLocation       \n Length:155        \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n\n\nThis section contributed by Mohammed Zuber"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#load-required-libraries",
    "href": "cdcdata-exercise/cdcdata-exercise.html#load-required-libraries",
    "title": "Data Analysis Excerise",
    "section": "5.5 Load Required Libraries",
    "text": "5.5 Load Required Libraries\n\n# Load necessary libraries for data processing and visualization\nlibrary(readxl)  # For reading Excel files\nlibrary(dplyr)   # For data manipulation\nlibrary(ggplot2) # For visualization\n\n# Set seed for reproducibility\nset.seed(42)"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#load-the-original-data",
    "href": "cdcdata-exercise/cdcdata-exercise.html#load-the-original-data",
    "title": "Data Analysis Excerise",
    "section": "5.6 Load the Original Data",
    "text": "5.6 Load the Original Data\n\n# Define the path to the dataset\n# Ensure the dataset is in the working directory\n\ndata_path &lt;- \"cigarette-tax.xlsx\"\n\n# Read the dataset from the specified sheet in the Excel file\ndf &lt;- read_excel(data_path, sheet = \"cigarette-tax\")\n\n# Display the first few rows to understand the dataset structure\nhead(df)\n\n# A tibble: 6 × 14\n  LocationAbbr LocationDesc  Year Datasource TopicDesc    MeasureDesc Data_Value\n  &lt;chr&gt;        &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;        &lt;chr&gt;            &lt;dbl&gt;\n1 AL           Alabama       2019 OW         The Tax Bur… Cigarette …  165763113\n2 AK           Alaska        2019 OW         The Tax Bur… Cigarette …   44773153\n3 AZ           Arizona       2019 OW         The Tax Bur… Cigarette …  296712275\n4 AR           Arkansas      2019 OW         The Tax Bur… Cigarette …  161909335\n5 CA           California    2019 OW         The Tax Bur… Cigarette … 1791254942\n6 CO           Colorado      2019 OW         The Tax Bur… Cigarette …  145551255\n# ℹ 7 more variables: Data_Value_Unit &lt;chr&gt;, Data_Value_Type &lt;chr&gt;,\n#   GeoLocation &lt;chr&gt;, Source &lt;chr&gt;, TopicTypeId &lt;chr&gt;, TopicId &lt;chr&gt;,\n#   MeasureId &lt;chr&gt;\n\n\nWe will now import the data from our repository using the here command. We can observe that there are 2550 observations with 14 variables. The variables some observations can be viewed using the head() command."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#generate-synthetic-data--llm-ai-tools-were-used-to-help-write-the-code",
    "href": "cdcdata-exercise/cdcdata-exercise.html#generate-synthetic-data--llm-ai-tools-were-used-to-help-write-the-code",
    "title": "Data Analysis Excerise",
    "section": "5.7 Generate Synthetic Data- LLM AI tools were used to help write the code",
    "text": "5.7 Generate Synthetic Data- LLM AI tools were used to help write the code\n\n# Copy the original dataset to preserve its structure\nsynthetic_df &lt;- df\n\n# Generate synthetic values for the 'Data_Value' column\n# The values are randomly sampled within the original range\nsynthetic_df$Data_Value &lt;- sample(\n  min(df$Data_Value, na.rm = TRUE):max(df$Data_Value, na.rm = TRUE), \n  size = nrow(df), \n  replace = TRUE\n)\n\n# Display the first few rows of the synthetic dataset to verify changes\nhead(synthetic_df)\n\n# A tibble: 6 × 14\n  LocationAbbr LocationDesc  Year Datasource TopicDesc    MeasureDesc Data_Value\n  &lt;chr&gt;        &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;        &lt;chr&gt;            &lt;int&gt;\n1 AL           Alabama       2019 OW         The Tax Bur… Cigarette … 1784329036\n2 AK           Alaska        2019 OW         The Tax Bur… Cigarette … 1231722496\n3 AZ           Arizona       2019 OW         The Tax Bur… Cigarette …  611534923\n4 AR           Arkansas      2019 OW         The Tax Bur… Cigarette … 1018881505\n5 CA           California    2019 OW         The Tax Bur… Cigarette …  677017575\n6 CO           Colorado      2019 OW         The Tax Bur… Cigarette … 1869612235\n# ℹ 7 more variables: Data_Value_Unit &lt;chr&gt;, Data_Value_Type &lt;chr&gt;,\n#   GeoLocation &lt;chr&gt;, Source &lt;chr&gt;, TopicTypeId &lt;chr&gt;, TopicId &lt;chr&gt;,\n#   MeasureId &lt;chr&gt;\n\n\nI created a synthetic dataset by copying the structure of the original dataset and replacing the Data_Value column with randomly sampled values within its original range. This ensures that the synthetic data maintains a similar distribution while removing any real-world patterns. While the minimum and maximum values are preserved, the randomness may not reflect trends or correlations present in the original data."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#scatter-plot-of-revenue-across-time-for-selected-states",
    "href": "cdcdata-exercise/cdcdata-exercise.html#scatter-plot-of-revenue-across-time-for-selected-states",
    "title": "Data Analysis Excerise",
    "section": "6.1 Scatter Plot of Revenue Across Time for Selected States",
    "text": "6.1 Scatter Plot of Revenue Across Time for Selected States\n\n# Define custom colors for each state\ncustom_colors &lt;- c(\"Georgia\" = \"red\", \n                   \"Kansas\" = \"blue\", \n                   \"Idaho\" = \"green\", \n                   \"Nebraska\" = \"purple\", \n                   \"Alabama\" = \"orange\")\n\n# Scatterplot of Year vs Data_Value\nggplot(dataset, aes(x = Year, y = Data_Value, color = LocationDesc)) +\n  geom_point(alpha = 0.6, size = 2) +\n  scale_color_manual(values = custom_colors) +\n  theme_minimal() +\n  labs(title = \"Scatterplot of Data_Value Over Time for Selected States\",\n       x = \"Year\",\n       y = \"Data Value\",\n       color = \"State\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nThe key difference between my scatter plot and my classmate’s is that mine appears randomly distributed, while theirs shows a clear trend over time, with values increasing before 2000 and declining afterward. This is because I generated my synthetic data using random sampling, which removed any underlying structure present in the original dataset. My classmate’s data retains a progressive pattern, suggesting that Data_Value follows a time-dependent trend. ## Further Cleaning: Filtering Data for 1970-2000\n\n# Filtering dataset for years less than 2001\ndata &lt;- dataset %&gt;% filter(Year &lt; 2001)\n\n# Viewing the first few rows of the newly filtered dataset\nhead(data)\n\n# A tibble: 6 × 5\n  LocationDesc LocationAbbr  Year Data_Value GeoLocation                        \n  &lt;chr&gt;        &lt;chr&gt;        &lt;dbl&gt;      &lt;int&gt; &lt;chr&gt;                              \n1 Alabama      AL            2000 1226607262 POINT (-86.631860762 32.840571122) \n2 Georgia      GA            2000  695213645 POINT (-83.627580346 32.839681093) \n3 Idaho        ID            2000 1592713712 POINT (-114.363730042 43.682630005)\n4 Kansas       KS            2000  748675169 POINT (-98.200781227 38.3477403)   \n5 Nebraska     NE            2000 1061013837 POINT (-99.365720623 41.6410409880…\n6 Alabama      AL            1999 1074575607 POINT (-86.631860762 32.840571122) \n\n\nTo focus on historical trends, I filtered the dataset to include only records from years before 2001 using the filter() function. This step ensures that the analysis captures a consistent time period, especially if later years exhibit different trends or irregularities. By restricting the data to 1970-2000, I aim to observe stable patterns without the potential disruptions seen in later years."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#confirming-observations-per-state",
    "href": "cdcdata-exercise/cdcdata-exercise.html#confirming-observations-per-state",
    "title": "Data Analysis Excerise",
    "section": "6.2 Confirming Observations Per State",
    "text": "6.2 Confirming Observations Per State\n\n# Counting the number of observations per state again.\nstate_counts2 &lt;- data %&gt;% count(LocationDesc)\n\n# Viewing the count result\nprint(state_counts2)\n\n# A tibble: 5 × 2\n  LocationDesc     n\n  &lt;chr&gt;        &lt;int&gt;\n1 Alabama         31\n2 Georgia         31\n3 Idaho           31\n4 Kansas          31\n5 Nebraska        31\n\n\nTo verify the distribution of observations across states after filtering, I used the count() function again to tally the number of records per state in the refined dataset. This step ensures that all selected states (Georgia, Kansas, Idaho, Alabama, and Nebraska) maintain a balanced representation after restricting the data to years before 2001."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#association-of-variables-scatter-plot-with-trend-line",
    "href": "cdcdata-exercise/cdcdata-exercise.html#association-of-variables-scatter-plot-with-trend-line",
    "title": "Data Analysis Excerise",
    "section": "6.3 Association of Variables: Scatter Plot with Trend Line",
    "text": "6.3 Association of Variables: Scatter Plot with Trend Line\n\nggplot(data, aes(x = Year, y = Data_Value, color = LocationDesc)) +\n  geom_point(alpha = 0.6) +\n  geom_smooth(method = \"lm\", se = FALSE) +  # Adding a linear trend line\n  theme_minimal() +\n  labs(title = \"Trend of Revenue from Cigarette(in US$) Over Years by State\",\n       x = \"Year\",\n       y = \"Revenue Value\",\n       color = \"State\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nThe key difference between my plot and my classmate’s is that my trend lines appear flatter, while theirs show a clear upward trajectory over time. This is because my synthetic Data_Value was generated randomly, removing any inherent growth patterns present in the original dataset. My classmate’s plot maintains a structured increase, indicating that revenue values naturally rise over time rather than fluctuating randomly."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#regression-analysis-relationship-over-time",
    "href": "cdcdata-exercise/cdcdata-exercise.html#regression-analysis-relationship-over-time",
    "title": "Data Analysis Excerise",
    "section": "6.4 Regression Analysis: Relationship Over Time",
    "text": "6.4 Regression Analysis: Relationship Over Time\n\n# Filtering data for Georgia\ngeorgia_data &lt;- dataset %&gt;% filter(LocationDesc == \"Georgia\")\n\n# Running linear regression based on Georgia\ngeorgia_model &lt;- lm(Data_Value ~ Year, data = georgia_data)\n\n# Viewing regression summary for Georgia\nsummary(georgia_model)\n\n\nCall:\nlm(formula = Data_Value ~ Year, data = georgia_data)\n\nResiduals:\n       Min         1Q     Median         3Q        Max \n-974428520 -333610875  -49039365  449037525  889230815 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)\n(Intercept)  3.899e+09  1.026e+10   0.380    0.705\nYear        -1.446e+06  5.142e+06  -0.281    0.780\n\nResidual standard error: 524700000 on 48 degrees of freedom\nMultiple R-squared:  0.001644,  Adjusted R-squared:  -0.01915 \nF-statistic: 0.07906 on 1 and 48 DF,  p-value: 0.7798\n\n\nThe dataset maintains the original structure, with each selected state having 50 observations, ensuring consistency. However, the regression analysis for Georgia shows a very low R-squared value (0.00164) and a high p-value (0.7798), indicating no clear trend over time. This suggests that the synthetic Data_Value was randomly assigned and does not reflect a structured increase or decrease.\n\n# Filtering data for Alabama\nalabama_data &lt;- dataset %&gt;% filter(LocationDesc == \"Alabama\")\n\n# Running linear regression for Alabama dataset\nalabama_model &lt;- lm(Data_Value ~ Year, data = alabama_data)\n\n# Viewing regression summary for Alabama model\nsummary(alabama_model)\n\n\nCall:\nlm(formula = Data_Value ~ Year, data = alabama_data)\n\nResiduals:\n       Min         1Q     Median         3Q        Max \n-842238895 -386165861   38772300  400649003  842216045 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)\n(Intercept) -4.996e+09  9.614e+09  -0.520    0.606\nYear         2.961e+06  4.820e+06   0.614    0.542\n\nResidual standard error: 491900000 on 48 degrees of freedom\nMultiple R-squared:  0.0078,    Adjusted R-squared:  -0.01287 \nF-statistic: 0.3773 on 1 and 48 DF,  p-value: 0.5419\n\n\nThe regression analysis for Alabama shows a low R-squared value (0.0078) and a high p-value (0.5419), indicating that Year does not significantly explain the variation in Data_Value. The near-zero R-squared suggests that the synthetic revenue values do not follow a clear increasing or decreasing trend over time. This likely results from the random assignment of Data_Value, which does not capture the expected real-world growth or decline. ## Summary Statistics of Revenue for Selected States\n\n# Summarizing Data Value for five selected states\nsummary_data &lt;- data %&gt;%\n  group_by(LocationDesc) %&gt;%\n  summarise(\n    count = n(), \n    mean = mean(Data_Value, na.rm = TRUE), \n    median = median(Data_Value, na.rm = TRUE), \n    min = min(Data_Value, na.rm = TRUE), \n    max = max(Data_Value, na.rm = TRUE), \n    sd = sd(Data_Value, na.rm = TRUE)\n  )\n\n# Viewing the summary result\nprint(summary_data)\n\n# A tibble: 5 × 7\n  LocationDesc count        mean     median       min        max         sd\n  &lt;chr&gt;        &lt;int&gt;       &lt;dbl&gt;      &lt;int&gt;     &lt;int&gt;      &lt;int&gt;      &lt;dbl&gt;\n1 Alabama         31  897512416.  960156234  48443527 1592272124 459682451.\n2 Georgia         31 1041163227.  931027872 119283033 1795190468 483486517.\n3 Idaho           31  962935962.  953346293  37056961 1801657976 502962014.\n4 Kansas          31  940194286.  927004867 133488936 1853330662 507391652.\n5 Nebraska        31 1045789591. 1068338750  14826708 1851782104 515086985.\n\n\nThe summary statistics for the five selected states indicate that each state has 31 observations, maintaining a balanced dataset. However, the mean and median values show high variability, suggesting inconsistencies in how Data_Value was generated. The wide range between min and max values and high standard deviation indicate that the synthetic data may still be too random rather than following a structured trend. ## Final Summary of the Dataset\n\nsummary(data)\n\n LocationDesc       LocationAbbr            Year        Data_Value       \n Length:155         Length:155         Min.   :1970   Min.   :1.483e+07  \n Class :character   Class :character   1st Qu.:1977   1st Qu.:5.343e+08  \n Mode  :character   Mode  :character   Median :1985   Median :9.591e+08  \n                                       Mean   :1985   Mean   :9.775e+08  \n                                       3rd Qu.:1993   3rd Qu.:1.388e+09  \n                                       Max.   :2000   Max.   :1.853e+09  \n GeoLocation       \n Length:155        \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n\n\nFrom the outputs, my synthetic dataset maintains the correct structure with selected variables such as LocationDesc, Year, and Data_Value, ensuring consistency. However, the regression analysis for Georgia and Alabama shows very low R-squared values (0.0016 and 0.0078, respectively) and high p-values (0.7798 and 0.5419), indicating no significant relationship between Year and Data_Value. Additionally, while the mean and median values for each state appear reasonable, the wide range and high standard deviation suggest excessive randomness in Data_Value generation."
  },
  {
    "objectID": "aboutme.html",
    "href": "aboutme.html",
    "title": "Welcome!",
    "section": "",
    "text": "Hello! My name is Prasanga Paudel."
  },
  {
    "objectID": "aboutme.html#education",
    "href": "aboutme.html#education",
    "title": "Welcome!",
    "section": "Education",
    "text": "Education\nI am currently pursuing an MS in Agricultural and Applied Economics at the University of Georgia. I completed my undergraduate degree in Agricultural Science in Nepal. My academic journey is driven by a strong motivation to address real-world challenges in applied fields through rigorous quantitative analysis."
  },
  {
    "objectID": "aboutme.html#programming-experience",
    "href": "aboutme.html#programming-experience",
    "title": "Welcome!",
    "section": "Programming Experience",
    "text": "Programming Experience\nI have experience with the following programming tools: - SAS - STATA - MATLAB"
  },
  {
    "objectID": "aboutme.html#research-interests",
    "href": "aboutme.html#research-interests",
    "title": "Welcome!",
    "section": "Research Interests",
    "text": "Research Interests\nMy research interests include: Food Economics, Environmental Economics, Policy Analysis ,Health Economics"
  },
  {
    "objectID": "aboutme.html#expectations-from-this-course",
    "href": "aboutme.html#expectations-from-this-course",
    "title": "Welcome!",
    "section": "Expectations from This Course",
    "text": "Expectations from This Course\nThrough this course, I hope to learn data analysis techniques and skills that are directly applicable to biological and applied economics fields."
  },
  {
    "objectID": "aboutme.html#something-interesting-about-me",
    "href": "aboutme.html#something-interesting-about-me",
    "title": "Welcome!",
    "section": "Something Interesting About Me",
    "text": "Something Interesting About Me\nI love watching soccer and cricket. My favorite club is FC Bayern Munich, a club from Germany. My favorite players from Bayern are Thomas Müller, Manuel Neuer, and Jamal Musiala."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html",
    "href": "coding-exercise/coding-exercise.html",
    "title": "R Coding Exercise",
    "section": "",
    "text": "Placeholder file for the future R coding exercise."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#creating-new-dataset-one-and-two",
    "href": "coding-exercise/coding-exercise.html#creating-new-dataset-one-and-two",
    "title": "R Coding Exercise",
    "section": "2.1 Creating new dataset: “one” and “two”",
    "text": "2.1 Creating new dataset: “one” and “two”\n\n# selecting the required variables to create a new dataset named one\none &lt;- africadata %&gt;% select(infant_mortality, life_expectancy) \nstr(one) # obtaining the information about the structure of one\n\n'data.frame':   2907 obs. of  2 variables:\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n\nsummary(one) # summarizing the details about one\n\n infant_mortality life_expectancy\n Min.   : 11.40   Min.   :13.20  \n 1st Qu.: 62.20   1st Qu.:48.23  \n Median : 93.40   Median :53.98  \n Mean   : 95.12   Mean   :54.38  \n 3rd Qu.:124.70   3rd Qu.:60.10  \n Max.   :237.40   Max.   :77.60  \n NA's   :226                     \n\ntwo &lt;- africadata %&gt;% select(population, life_expectancy) # creating another dataset with only two variables as listed\nstr(two)  # obtaining the information about the structure of two\n\n'data.frame':   2907 obs. of  2 variables:\n $ population     : num  11124892 5270844 2431620 524029 4829291 ...\n $ life_expectancy: num  47.5 36 38.3 50.3 35.2 ...\n\nsummary(two)  # obtaining the summary about the dataset two\n\n   population        life_expectancy\n Min.   :    41538   Min.   :13.20  \n 1st Qu.:  1605232   1st Qu.:48.23  \n Median :  5570982   Median :53.98  \n Mean   : 12235961   Mean   :54.38  \n 3rd Qu.: 13888152   3rd Qu.:60.10  \n Max.   :182201962   Max.   :77.60  \n NA's   :51"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#figure1-scatterplot-of-life-expectancy-vs-infant-mortality",
    "href": "coding-exercise/coding-exercise.html#figure1-scatterplot-of-life-expectancy-vs-infant-mortality",
    "title": "R Coding Exercise",
    "section": "3.1 Figure1: Scatterplot of Life Expectancy vs Infant Mortality",
    "text": "3.1 Figure1: Scatterplot of Life Expectancy vs Infant Mortality\nWe observe that the life expectancy is going down as the infant mortality increases for the country, this could be because the health infrastructure that is unable to provide support to infant population might also not be able to support the general population. The streaks of data represent individual countries, most of the streaks seem to be heading downwards, and the overall tendency is also downwards implying negative correlation.\n\n# Creating scatterplot with infant mortality on x-axis and life expectancy on y-axis\nggplot(one, aes(x = log(infant_mortality), y = life_expectancy)) + #setting variables to different axis\n  geom_point(color = \"red\", alpha = 0.7) +\nlabs(\n    title = \"Scatterplot of Life Expectancy vs Infant Mortality\", # giving a title to the figure\n    x = \"Infant Mortality\", #labeling the axis\n    y = \"Life Expectancy\" #labeling the axis\n  ) +\n  theme_minimal()\n\nWarning: Removed 226 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#figure-2-scatterplot-of-life-expectancy-vs-population-size",
    "href": "coding-exercise/coding-exercise.html#figure-2-scatterplot-of-life-expectancy-vs-population-size",
    "title": "R Coding Exercise",
    "section": "3.2 Figure 2: Scatterplot of Life Expectancy vs Population Size",
    "text": "3.2 Figure 2: Scatterplot of Life Expectancy vs Population Size\nWe observe the life expectancy is going up as the country is more populated, this could be because more populated countries in Africa are more developed in health sectors and able to prove health support. The streaks of data represent individual countries, most of the streaks seem to be heading upwards, and the overall tendency is also upwards implying positive correlation.\n\n# Create scatterplot with regression line\nggplot(two, aes(x = log(population), y = life_expectancy)) + #setting variables to different axis\n  geom_point(color = \"darkgreen\", alpha = 0.7) +\nlabs(\n    title = \"Scatterplot of Life Expectancy vs Population Size\", # giving a title to the figure\n    x = \"Population Size (Natural Log Scale)\", #labeling the axis\n    y = \"Life Expectancy\" #labeling the axis\n  ) +\n  theme_minimal()\n\nWarning: Removed 51 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#table-1-summary-of-missing-values-for-infant-mortality",
    "href": "coding-exercise/coding-exercise.html#table-1-summary-of-missing-values-for-infant-mortality",
    "title": "R Coding Exercise",
    "section": "3.3 Table 1: Summary of missing values for infant mortality",
    "text": "3.3 Table 1: Summary of missing values for infant mortality\n\n# Calculating the number of missing values for infant_mortality by  grouping them according to year\nmissing_data_summary &lt;- africadata %&gt;% group_by(year) %&gt;% summarize( missing_infant_mortality = sum(is.na(infant_mortality)), #gives us total missing values\n    total_observations = n(), #gives us total observations\n  )\n\n# printing the result to have a look\nprint(missing_data_summary)\n\n# A tibble: 57 × 3\n    year missing_infant_mortality total_observations\n   &lt;int&gt;                    &lt;int&gt;              &lt;int&gt;\n 1  1960                       10                 51\n 2  1961                       17                 51\n 3  1962                       16                 51\n 4  1963                       16                 51\n 5  1964                       15                 51\n 6  1965                       14                 51\n 7  1966                       13                 51\n 8  1967                       11                 51\n 9  1968                       11                 51\n10  1969                        7                 51\n# ℹ 47 more rows\n\n\nWe will create a new dataset based on the data from year 2000 only.\n\ndata_2000 &lt;- africadata %&gt;% filter(year == 2000) # setting filter as year 2000 to be used to create the new dataset\nstr(data_2000)\n\n'data.frame':   51 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...\n $ infant_mortality: num  33.9 128.3 89.3 52.4 96.2 ...\n $ life_expectancy : num  73.3 52.3 57.2 47.6 52.6 46.7 54.3 68.4 45.3 51.5 ...\n $ fertility       : num  2.51 6.84 5.98 3.41 6.59 7.06 5.62 3.7 5.45 7.35 ...\n $ population      : num  31183658 15058638 6949366 1736579 11607944 ...\n $ gdp             : num  5.48e+10 9.13e+09 2.25e+09 5.63e+09 2.61e+09 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\nsummary(data_2000)\n\n         country        year      infant_mortality life_expectancy\n Algeria     : 1   Min.   :2000   Min.   : 12.30   Min.   :37.60  \n Angola      : 1   1st Qu.:2000   1st Qu.: 60.80   1st Qu.:51.75  \n Benin       : 1   Median :2000   Median : 80.30   Median :54.30  \n Botswana    : 1   Mean   :2000   Mean   : 78.93   Mean   :56.36  \n Burkina Faso: 1   3rd Qu.:2000   3rd Qu.:103.30   3rd Qu.:60.00  \n Burundi     : 1   Max.   :2000   Max.   :143.30   Max.   :75.00  \n (Other)     :45                                                  \n   fertility       population             gdp               continent \n Min.   :1.990   Min.   :    81154   Min.   :2.019e+08   Africa  :51  \n 1st Qu.:4.150   1st Qu.:  2304687   1st Qu.:1.274e+09   Americas: 0  \n Median :5.550   Median :  8799165   Median :3.238e+09   Asia    : 0  \n Mean   :5.156   Mean   : 15659800   Mean   :1.155e+10   Europe  : 0  \n 3rd Qu.:5.960   3rd Qu.: 17391242   3rd Qu.:8.654e+09   Oceania : 0  \n Max.   :7.730   Max.   :122876723   Max.   :1.329e+11                \n                                                                      \n                       region  \n Eastern Africa           :16  \n Western Africa           :16  \n Middle Africa            : 8  \n Northern Africa          : 6  \n Southern Africa          : 5  \n Australia and New Zealand: 0  \n (Other)                  : 0"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#figure-3-infant-mortality-vs-life-expectancy-scatterplot-for-year-2000",
    "href": "coding-exercise/coding-exercise.html#figure-3-infant-mortality-vs-life-expectancy-scatterplot-for-year-2000",
    "title": "R Coding Exercise",
    "section": "3.4 Figure 3: Infant mortality vs life expectancy scatterplot for year 2000",
    "text": "3.4 Figure 3: Infant mortality vs life expectancy scatterplot for year 2000\nThe figure shows the scatterplot with a regression line to analyze the correlation more easily.\n\nggplot(data_2000, aes(x = log(infant_mortality), y = life_expectancy)) + #setting variables to different axis\n  geom_point(color = \"red\", alpha = 0.7) + geom_smooth(method = \"lm\", color = \"blue\", se = FALSE) +\nlabs(\n    title = \"Scatterplot of Life Expectancy vs Infant Mortality for year 2000\", # giving a title to the figure\n    x = \"Infant Mortality\", #labeling the axis\n    y = \"Life Expectancy\" #labeling the axis\n  ) +\n  theme_minimal()\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#figure-4-infany-mortality-vs-population-catterplot-for-year-2000",
    "href": "coding-exercise/coding-exercise.html#figure-4-infany-mortality-vs-population-catterplot-for-year-2000",
    "title": "R Coding Exercise",
    "section": "3.5 Figure 4: Infany mortality vs population catterplot for year 2000",
    "text": "3.5 Figure 4: Infany mortality vs population catterplot for year 2000\nThe figure shows the scatterplot with a regression line to analyze the correlation more easily.\n\nggplot(data_2000, aes(x = log(population), y = life_expectancy)) + #setting variables to different axis\n  geom_point(color = \"darkgreen\", alpha = 0.7) + geom_smooth(method = \"lm\", color = \"blue\", se = FALSE) +\nlabs(\n    title = \"Scatterplot of Life Expectancy vs Population Size for the year 2000\", # giving a title to the figure\n    x = \"Population Size (Natural Log Scale)\", #labeling the axis\n    y = \"Life Expectancy\" #labeling the axis\n  ) +\n  theme_minimal()\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#fitting-the-linear-model",
    "href": "coding-exercise/coding-exercise.html#fitting-the-linear-model",
    "title": "R Coding Exercise",
    "section": "4.1 Fitting the linear model",
    "text": "4.1 Fitting the linear model\nThe two linear models are as follow\n\n# Fit the linear model\nfit1 &lt;- lm(life_expectancy ~ infant_mortality, data = data_2000) # fit1 is a model with infant mortality as predictor\nfit2 &lt;- lm(life_expectancy ~ log(population), data = data_2000) # fit2 is a model with log(population) as predictor\n\nThe relation between life expectancy and infant mortality is statistically significand, with negative correlation. The relation between life expectancy and population is not statistically significant."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#summarizing-the-fitting-result",
    "href": "coding-exercise/coding-exercise.html#summarizing-the-fitting-result",
    "title": "R Coding Exercise",
    "section": "4.2 Summarizing the fitting result",
    "text": "4.2 Summarizing the fitting result\nThe summary of the two linear models are provided below.\n\n# View the summary of the model\nsummary(fit1) #summary of the fit1 model\n\n\nCall:\nlm(formula = life_expectancy ~ infant_mortality, data = data_2000)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-22.6651  -3.7087   0.9914   4.0408   8.6817 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      71.29331    2.42611  29.386  &lt; 2e-16 ***\ninfant_mortality -0.18916    0.02869  -6.594 2.83e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.221 on 49 degrees of freedom\nMultiple R-squared:  0.4701,    Adjusted R-squared:  0.4593 \nF-statistic: 43.48 on 1 and 49 DF,  p-value: 2.826e-08\n\nsummary(fit2) #summary of the fit2 model\n\n\nCall:\nlm(formula = life_expectancy ~ log(population), data = data_2000)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-19.113  -4.809  -1.554   3.907  18.863 \n\nCoefficients:\n                Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      65.3243    12.5203   5.217 3.65e-06 ***\nlog(population)  -0.5711     0.7943  -0.719    0.476    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 8.502 on 49 degrees of freedom\nMultiple R-squared:  0.01044,   Adjusted R-squared:  -0.009755 \nF-statistic: 0.517 on 1 and 49 DF,  p-value: 0.4755\n\n\nThis section is contributed by DOREEN KIBUULE KALEMBE.\nIn this section, we will acquire data from heights.\n\nlibrary(dslabs)\nhelp(heights)\n\n# View the structure of the dataset\nstr(heights)\n\n'data.frame':   1050 obs. of  2 variables:\n $ sex   : Factor w/ 2 levels \"Female\",\"Male\": 2 2 2 2 2 1 1 1 1 2 ...\n $ height: num  75 70 68 74 61 65 66 62 66 67 ...\n\n# View the first few rows of the dataset\nhead(heights)\n\n     sex height\n1   Male     75\n2   Male     70\n3   Male     68\n4   Male     74\n5   Male     61\n6 Female     65\n\n\nThe data set includes men and women that reported their heights in inches. We are going to explore this data set and see what we can come up with.\nWe are going to assign the data set a name. Lets say heights_data.\n\nlibrary(naniar) # this package will help us know where there are any missing values in the data\n\nheights_data&lt;-heights\ngg_miss_var(heights_data)# this is helping us check for any na variables in the data set.\n\n\n\n\n\n\n\npct_complete(heights_data) # the data is 100 percent complete.\n\n[1] 100\n\nsum(is.na(heights_data))# checks for missing values in the data set\n\n[1] 0\n\n\nThe data show that there are no missing values in the dataset and the data is 100 percent complete.\nLets try to get the summary/descriptitive statistics of the data.\n\nlibrary(tidyverse)\nlibrary(dplyr)\n# Calculate descriptive statistics for height by gender\nheights_summary &lt;- heights_data %&gt;%\n  group_by(sex) %&gt;%  # Group data by gender\n  summarise(\n    count = n(),                   # Count of observations\n    mean_height = mean(height, na.rm = TRUE), # Mean height\n    median_height = median(height, na.rm = TRUE), # Median height\n    sd_height = sd(height, na.rm = TRUE),     # Standard deviation\n    min_height = min(height, na.rm = TRUE),   # Minimum height\n    max_height = max(height, na.rm = TRUE)    # Maximum height\n  )\nheights_summary\n\n# A tibble: 2 × 7\n  sex    count mean_height median_height sd_height min_height max_height\n  &lt;fct&gt;  &lt;int&gt;       &lt;dbl&gt;         &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n1 Female   238        64.9          65.0      3.76         51       79  \n2 Male     812        69.3          69        3.61         50       82.7\n\n\nOur summary statistics show that the shortest person male is 50 while the shortest woman is 51 inches. On average, men are taller than women.\nLets try to visualise the data.\n\n #Compare the distribution of height for each sex\nggplot(data = heights_data, aes(x = sex, y = height, fill = sex)) +\n  geom_boxplot() +\n  labs(\n    title = \"Distribution of Height by Sex\",\n    x = \"Sex\",\n    y = \"Height (inches)\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nFrom our results above, we can make a simple linear regression between sex and height.In this model, height is the dependent variable and sex (categorical variable: “Male” or “Female”) is the independent variable.\n\nLinear_model&lt;-lm(height ~ sex, data = heights_data)\nsummary(Linear_model)\n\n\nCall:\nlm(formula = height ~ sex, data = heights_data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-19.3148  -2.3148  -0.3148   2.6852  14.0606 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  64.9394     0.2363  274.82   &lt;2e-16 ***\nsexMale       4.3753     0.2687   16.28   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.645 on 1048 degrees of freedom\nMultiple R-squared:  0.2019,    Adjusted R-squared:  0.2012 \nF-statistic: 265.1 on 1 and 1048 DF,  p-value: &lt; 2.2e-16\n\n\n\nOur results show that the average height of females which is our reference group is 64.94inches.\nsexMale (Estimate = 4.3753): This result represents the difference in average height between males and females.Males are, on average, 4.3753 inches taller than females.\nBoth the intercept and the coefficient for sexMale have p-values &lt; 2e-16, meaning they are highly statistically significant (p &lt; 0.0001).This indicates that the difference in height between males and females is unlikely to be due to random chance."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html",
    "href": "fitting-exercise/fitting-exercise.html",
    "title": "Model Fitting Exercise",
    "section": "",
    "text": "We will first import our dataset from the directory.\n\n# Constructing the file path using here()\nfile_path &lt;- here(\"fitting-exercise\",\"data\", \"Mavoglurant_A2121_nmpk.csv\")\n\n# Importing the Excel file from the file path\nMavoglurant_data &lt;- read.csv(file_path)\n\n# Viewing the uppermost data of the imported dataset\nhead(Mavoglurant_data)\n\n   ID CMT EVID EVI2 MDV  DV  LNDV AMT  TIME DOSE OCC RATE AGE SEX RACE   WT\n1 793   1    1    1   1   0 0.000  25 0.000   25   1   75  42   1    2 94.3\n2 793   2    0    0   0 491 6.196   0 0.200   25   1    0  42   1    2 94.3\n3 793   2    0    0   0 605 6.405   0 0.250   25   1    0  42   1    2 94.3\n4 793   2    0    0   0 556 6.321   0 0.367   25   1    0  42   1    2 94.3\n5 793   2    0    0   0 310 5.737   0 0.533   25   1    0  42   1    2 94.3\n6 793   2    0    0   0 237 5.468   0 0.700   25   1    0  42   1    2 94.3\n        HT\n1 1.769997\n2 1.769997\n3 1.769997\n4 1.769997\n5 1.769997\n6 1.769997"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#preparing-the-data",
    "href": "fitting-exercise/fitting-exercise.html#preparing-the-data",
    "title": "Model Fitting Exercise",
    "section": "3.2 Preparing the data",
    "text": "3.2 Preparing the data\nAs there are some individuals that seem to have received the drug more than once, we will only keep observations with OCC = 1\n\n#writing a code that keeps only observations with OCC = 1\nMavoglurant_data_OCC1 &lt;- subset(Mavoglurant_data, OCC == 1)\n\n#writing code to exclude the observations with TIME = 0\nMavoglurant_data_filtered &lt;- Mavoglurant_data_OCC1 %&gt;%\n  filter(TIME != 0)"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#creating-the-final-dataset",
    "href": "fitting-exercise/fitting-exercise.html#creating-the-final-dataset",
    "title": "Model Fitting Exercise",
    "section": "3.4 Creating the final dataset",
    "text": "3.4 Creating the final dataset\nWriting a code that converts RACE and SEX to factor variables and keeps only these variables: Y,DOSE,AGE,SEX,RACE,WT,HT\n\nfinal_data_cleaned &lt;- final_data %&gt;% mutate (\n  RACE = factor(RACE), SEX = factor(SEX)) %&gt;% select (Y, DOSE, AGE, SEX, RACE, WT, HT\n)\n\ndim(final_data_cleaned)\n\n[1] 120   7"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#plotting-the-relationship-with-outcome-of-interest-y",
    "href": "fitting-exercise/fitting-exercise.html#plotting-the-relationship-with-outcome-of-interest-y",
    "title": "Model Fitting Exercise",
    "section": "4.2 Plotting the relationship with outcome of interest (Y)",
    "text": "4.2 Plotting the relationship with outcome of interest (Y)\nHere, we will show some scatterplots or boxplots, whichever is suitable, between the main outcome of interest (total drug, Y) and other predictors. We will use box-plot if the variable is categorical.\n\n# Scatterplot: Y vs DOSE\np1 &lt;- ggplot(final_data_cleaned, aes(x = DOSE, y = Y)) +\n  geom_point(alpha = 0.6, color = \"blue\") +\n  geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n  labs(title = \"Y vs DOSE\", x = \"DOSE\", y = \"Y\")\n\n# Scatterplot: Y vs AGE\np2 &lt;- ggplot(final_data_cleaned, aes(x = AGE, y = Y)) +\n  geom_point(alpha = 0.6, color = \"green\") +\n  geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n  labs(title = \"Y vs AGE\", x = \"AGE\", y = \"Y\")\n\n# Scatterplot: Y vs WT\np3 &lt;- ggplot(final_data_cleaned, aes(x = WT, y = Y)) +\n  geom_point(alpha = 0.6, color = \"purple\") +\n  geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n  labs(title = \"Y vs WT\", x = \"WT\", y = \"Y\")\n\n# Scatterplot: Y vs HT\np4 &lt;- ggplot(final_data_cleaned, aes(x = HT, y = Y)) +\n  geom_point(alpha = 0.6, color = \"orange\") +\n  geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n  labs(title = \"Y vs HT\", x = \"HT\", y = \"Y\")\n\n# Boxplot: Y vs SEX\np5 &lt;- ggplot(final_data_cleaned, aes(x = SEX, y = Y, fill = SEX)) +\n  geom_boxplot() +\n  labs(title = \"Y vs SEX\", x = \"SEX\", y = \"Y\") +\n  theme(legend.position = \"none\")\n\n# Boxplot: Y vs RACE\np6 &lt;- ggplot(final_data_cleaned, aes(x = RACE, y = Y, fill = RACE)) +\n  geom_boxplot() +\n  labs(title = \"Y vs RACE\", x = \"RACE\", y = \"Y\") +\n  theme(legend.position = \"none\")\n\n# Combine all plots into a common canvas\ncombined_plots &lt;- (p1 + p2) / (p3 + p4) / (p5 + p6)\n\n# Display the combined plots\ncombined_plots\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nWe can observe from the figures above that:\n\nDose and Y (Total drug) dont have a strong correlation.\nAge and Y dont have a strong correlation.\nWeight and Y have a negative correlation.\nHeight and Y have a negative correlation.\nSex 1 on average has higher total drug."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#plotting-the-distribution-of-variables",
    "href": "fitting-exercise/fitting-exercise.html#plotting-the-distribution-of-variables",
    "title": "Model Fitting Exercise",
    "section": "4.3 Plotting the distribution of variables",
    "text": "4.3 Plotting the distribution of variables\nNow, we will plot the distributions of our variables to make sure they all make sense. We will set the bin according to the values and distribution patterns within the variable\n\n# Custom theme for consistent styling\ncustom_theme &lt;- theme(\n  plot.title = element_text(size = 14, face = \"bold\"),\n  axis.title = element_text(size = 12),\n  axis.text = element_text(size = 10),\n  plot.margin = margin(1, 1, 1, 1, \"cm\")\n)\n\n# Histogram for Y\np1 &lt;- ggplot(final_data_cleaned, aes(x = Y)) +\n  geom_histogram(binwidth = 10, fill = \"blue\", color = \"black\") +\n  labs(title = \"Distribution of Y\", x = \"Y\", y = \"Count\") +\n  custom_theme\n\n# Histogram for DOSE\np2 &lt;- ggplot(final_data_cleaned, aes(x = DOSE)) +\n  geom_histogram(binwidth = 10, fill = \"green\", color = \"black\") +\n  labs(title = \"Distribution of DOSE\", x = \"DOSE\", y = \"Count\") +\n  custom_theme\n\n# Histogram for AGE\np3 &lt;- ggplot(final_data_cleaned, aes(x = AGE)) +\n  geom_histogram(binwidth = 5, fill = \"purple\", color = \"black\") +\n  labs(title = \"Distribution of AGE\", x = \"AGE\", y = \"Count\") +\n  custom_theme\n\n# Histogram for WT\np4 &lt;- ggplot(final_data_cleaned, aes(x = WT)) +\n  geom_histogram(binwidth = 5, fill = \"orange\", color = \"black\") +\n  labs(title = \"Distribution of WT\", x = \"WT\", y = \"Count\") +\n  custom_theme\n\n# Histogram for HT\np5 &lt;- ggplot(final_data_cleaned, aes(x = HT)) +\n  geom_histogram(binwidth = 0.01, fill = \"red\", color = \"black\") +\n  labs(title = \"Distribution of HT\", x = \"HT\", y = \"Count\") +\n  custom_theme\n\n# Bar plot for SEX\np6 &lt;- ggplot(final_data_cleaned, aes(x = SEX)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(title = \"Distribution of SEX\", x = \"SEX\", y = \"Count\") +\n  custom_theme\n\n# Bar plot for RACE\np7 &lt;- ggplot(final_data_cleaned, aes(x = RACE)) +\n  geom_bar(fill = \"pink\", color = \"black\") +\n  labs(title = \"Distribution of RACE\", x = \"RACE\", y = \"Count\") +\n  custom_theme\n\n# Combining all plots into a common canvas\ncombined_plots &lt;- (p1 + p2) / (p3 + p4) / (p5 + p6 + p7)\n\n# Display the combined plots\ncombined_plots\n\n\n\n\n\n\n\n\nThe distribution of the variables make sense in my opinion. Age, Weight, Height are all fairly normally distributed. Total drug has a somewhat uniform distribution. Other categorical variables have an unbalanced distribution among them but it is practically possible if the research is focused on specific group of people."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#pair-wise-plots",
    "href": "fitting-exercise/fitting-exercise.html#pair-wise-plots",
    "title": "Model Fitting Exercise",
    "section": "4.4 Pair-wise plots",
    "text": "4.4 Pair-wise plots\nHere, we will plot different variables against each other to see any possible relation or pattern between the variables.\nNote: Please ignore the plots of a variable against itself as it does not make any sense.\n\n# Selecting the variables of interest\nselected_vars &lt;- final_data_cleaned %&gt;%\n  select(Y, DOSE, AGE, WT, HT)  # to nclude only numeric variables for pair plots\n\n# Creating a pair plot\npair_plot &lt;- ggpairs(selected_vars, \n                     title = \" Plotting pairs of Numeric Variables\",\n                     lower = list(continuous = wrap(\"smooth\", alpha = 0.3, color = \"blue\")),  # Add smooth lines\n                     diag = list(continuous = wrap(\"densityDiag\", fill = \"orange\")),  # Density plots on diagonal\n                     upper = list(continuous = wrap(\"cor\", size = 4)))  # Add correlation coefficients\n\n# Disply the pair plot\nprint(pair_plot)\n\n\n\n\n\n\n\n\nIt is visible that HT and WT are strongly correlated. Y shows correlation with WT. Age and WT also show some moderate correlation."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#correlation-among-variables",
    "href": "fitting-exercise/fitting-exercise.html#correlation-among-variables",
    "title": "Model Fitting Exercise",
    "section": "4.5 Correlation among variables",
    "text": "4.5 Correlation among variables\nHere, we will create a cross-table matrix that shows the correlation among our variable of interests.\n\n# Creating a correlation plot\ncor_plot &lt;- ggcorr(selected_vars, \n                   method = c(\"pairwise\", \"pearson\"),  # Use Pearson correlation\n                   label = TRUE,  # to display correlation values\n                   label_size = 4, \n                   color = \"grey50\", \n                   hjust = 0.75, \n                   size = 3, \n                   layout.exp = 1)\n\n# Display the correlation plot\nprint(cor_plot)\n\n\n\n\n\n\n\n\nIt is visible that HT and WT show the maximum correlation with a correlation coefficient of 0.6. Age and HT also show sloghtly weaker correlation. Dose has no correlation with WT and HT."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html",
    "href": "presentation-exercise/presentation-exercise.html",
    "title": "Presentation Exercise",
    "section": "",
    "text": "Placeholder file for the future R coding exercise.\n\n\n1 Data Importing\nIn this section we will import the data we acquired from fivethirtyeight, and have an initial look at it. The link to the graphical presentation and the actual data is: https://fivethirtyeight.com/features/most-police-dont-live-in-the-cities-they-serve/\n\n# Constructing the file path using here()\nfile_path &lt;- here(\"presentation-exercise\",\"data\", \"police-locals.csv\")\n\n# Importing the Excel file fromthe file path\npolice_data &lt;- read.csv(file_path)\n\n# Viewing the uppermost data of the imported dataset\nhead(police_data)\n\n          city police_force_size       all      white non.white       black\n1     New York             32300 0.6179567 0.44638656 0.7644189 0.770891365\n2      Chicago             12120 0.8750000 0.87196262 0.8774003  0.89740566\n3  Los Angeles             10100 0.2282178 0.15277778 0.2638484 0.387387387\n4   Washington              9340 0.1156317 0.05677419 0.1573651 0.170189099\n5      Houston              7700 0.2922078 0.17373461 0.3992583  0.36637931\n6 Philadelphia              6045 0.8354012 0.77689873 0.8994801 0.924657534\n     hispanic       asian\n1 0.762860728 0.749235474\n2  0.83982684 0.966666667\n3 0.217679558 0.305263158\n4  0.08988764 0.230769231\n5 0.457142857 0.408163265\n6 0.817391304          **\n\n\n\n\n\n2 Asking ChatGPT to create a graph based on original gaph\nI took a screenshot of the graph from the website as it was a fairly long and I instructed chatGPT to follow some instruction so that it creates the graph that I want. \nThe initial prompt is as follow:\nI want to create this type of visualization,I have the following variables Header Definition city: U.S. city police_force_size: Number of police officers serving that city all: Percentage of the total police force that lives in the city white: Percentage of white (non-Hispanic) police officers who live in the city non-white: Percentage of non-white police officers who live in the city black: Percentage of black police officers who live in the city hispanic: Percentage of Hispanic police officers who live in the city asian: Percentage of Asian police officers who live in the city\nI want you to follow these instruction if it helps: 1. place the name of the cities to the left 2. then place the size of the corresponding police force to the right 3. then in the middle place a scale where you will show what percentage of the officers who live in the city, ( make three categories: All, White, and others and plot their corresponding percent in the scale you created. 4. mark the scales only at 0%, 25%, 50%, 75%, and 100% 5. generate data yourself if required\n\n\n\n3 Directly running the code provided by chatGPT (without providing actual data)\n\n# Generate sample data\ndata &lt;- data.frame(\n  city = c(\"Laredo, Texas\", \"Chicago\", \"Corpus Christi, Texas\", \"El Paso, Texas\", \"Philadelphia\"),\n  police_force_size = c(1435, 12120, 770, 2260, 6045),\n  all = runif(5, 10, 70),\n  white = runif(5, 5, 65),\n  non_white = runif(5, 5, 65)\n)\n\ndata &lt;- data %&gt;% arrange(desc(police_force_size))\n\ndata_long &lt;- data %&gt;% \n  pivot_longer(cols = c(\"all\", \"white\", \"non_white\"), names_to = \"category\", values_to = \"percentage\")\n\nggplot(data_long, aes(x = percentage, y = reorder(city, police_force_size), color = category)) +\n  geom_point(size = 3) +\n  scale_x_continuous(breaks = c(0, 25, 50, 75, 100), labels = c(\"0%\", \"25%\", \"50%\", \"75%\", \"100%\"), limits = c(0, 100)) +\n  labs(x = \"Percentage of Police Officers Living in the City\", y = \"City\", title = \"Percentage of Police Officers Living in the City\") +\n  theme_minimal() +\n  theme(legend.title = element_blank()) +\n  geom_text(aes(label = police_force_size, x = 105), hjust = 0, size = 3, color = \"black\", data = data)\n\nWarning: Removed 5 rows containing missing values or values outside the scale range\n(`geom_text()`).\n\n\n\n\n\n\n\n\n\nThis is the figure that was obtained after I ran the code provided by chatGPT, I think chatGPT did a very good job here.\n\n\n\n4 Final version of the code after repeated iterations\nAfter going through multiple edits and back-and-forth conversation with chatGPT, the following code was obtained:\n\n# Converting character columns to numeric where necessary\npolice_data &lt;- police_data %&gt;%\n  mutate(across(c(all, white, non.white), as.numeric))  # Focusing only on 'all', 'white', 'non.white'\n\n# Reshaping data to long format, including only relevant categories\ndata_long &lt;- police_data %&gt;% \n  pivot_longer(cols = c(\"all\", \"white\", \"non.white\"), \n               names_to = \"category\", \n               values_to = \"percentage\")\n\n# Creating the plot\np &lt;- ggplot(data_long, aes(x = percentage, y = reorder(city, percentage), color = category, fill = category)) +  # Ordering cities by 'percentage'\n  geom_point(shape = 21, colour = \"black\", size = 2, stroke = 0.5) +  # Increasing stroke size\n  scale_x_continuous(breaks = seq(0, 1, by = 0.25),  # Adjusting breaks for decimal values\n                     labels = scales::percent_format(accuracy = 1),  # Formatting as percentages\n                     limits = c(0, 1),  # Adjusting limits for decimal values\n                     position = \"top\") +\n  labs(x = \"\", y = \"City\", title = \"Percentage of Police Officers Living in the City\") +\n  scale_color_manual(values = c(\"all\" = \"dodgerblue\", \"white\" = \"black\", \"non.white\" = \"forestgreen\")) +  # Adjust color for categories\n  scale_fill_manual(values = c(\"all\" = \"dodgerblue\", \"white\" = \"black\", \"non.white\" = \"forestgreen\")) +  # Fill colors for shape 21\n  theme_minimal() +\n  theme(\n    legend.title = element_blank(),\n    axis.title.x = element_blank(),\n    axis.text.x = element_text(hjust = 0.5),\n    plot.margin = margin(10, 10, 10, 60)  # Increasing left margin for y-axis labels\n  ) +\n  geom_text(aes(label = police_force_size, x = 1.05), hjust = 0, size = 3, color = \"black\", \n            data = data_long %&gt;% filter(category == \"all\")) +  # Useing data_long filtered for 'all' category\n  scale_y_discrete(expand = expansion(add = c(0.5, 0.5))) +  # Adding spacing to y-axis\n  coord_cartesian(clip = \"off\")  # Allowing labels to go outside the plot area\n\n# Saving the plot as a JPEG file\n\nggsave(here(\"presentation-exercise\", \"images\", \"police_officers_plot.jpeg\"), \n       plot = p, width = 6.2, height = 10.2, dpi = 300, limitsize = FALSE)\n\nWarning: No shared levels found between `names(values)` of the manual scale and the\ndata's colour values.\n\n\nWarning: Removed 75 rows containing missing values or values outside the scale range\n(`geom_text()`).\n\n# Rendering the plot\nprint(p)\n\nWarning: No shared levels found between `names(values)` of the manual scale and the\ndata's colour values.\nRemoved 75 rows containing missing values or values outside the scale range\n(`geom_text()`).\n\n\n\n\n\n\n\n\n\nI could not load the exact image in R but the saved file shows that the created image is a vertical image with enough spacing between the y-axis components. I also tried placing the total size of the police force at the right side but it seems that ggplot2 is unable to create multiple axes (like two y-axis side by side) R does have options to create multiple axes using par() but i could not make it work\n Renaming variable for consistency\nBefore moving into tabulation, we will rename our variable if they have strange characters in their name.\n\npolice_data &lt;- police_data %&gt;%\n  rename(non_white = non.white)\n\n\n\n5 Tabulation\nIn this section, we will create an advance table based on the same data we collected for the above graph.\n\n# Converting percentage columns to numeric\npolice_data &lt;- police_data %&gt;%\n  mutate(across(c(all, white, non_white, black, hispanic, asian), ~ suppressWarnings(as.numeric(.)))) %&gt;%\n  replace_na(list(all = 0, white = 0, non_white = 0, black = 0, hispanic = 0, asian = 0))\n\n# Defining a function to map values to appropriate RGBA colors\ncolor_transparency &lt;- function(value) {\n  ifelse(value &lt; 0.25, \"rgba(255,165,0,0.25)\",  # 75% transparent\n         ifelse(value &lt; 0.50, \"rgba(255,165,0,0.50)\",  # 50% transparent\n                ifelse(value &lt; 0.75, \"rgba(255,165,0,0.75)\",  # 25% transparent\n                       \"rgba(255,165,0,1.00)\")))  # Fully opaque\n}\n\n# Summarizing police data\npolice_summary &lt;- police_data %&gt;%\n  arrange(desc(police_force_size)) %&gt;%\n  head(10)  # Keeping the top 10 largest police forces for a concise table\n\n# Calculating averages for the summary\naverages &lt;- police_summary %&gt;%\n  summarise(\n    city = \"Average\",\n    police_force_size = mean(police_force_size, na.rm = TRUE),\n    all = mean(all, na.rm = TRUE),\n    white = mean(white, na.rm = TRUE),\n    non_white = mean(non_white, na.rm = TRUE),\n    black = mean(black, na.rm = TRUE),\n    hispanic = mean(hispanic, na.rm = TRUE),\n    asian = mean(asian, na.rm = TRUE)\n  )\n\n# Combining the summary and averages\npolice_summary_with_averages &lt;- bind_rows(police_summary, averages)\n\n# Creating the formatted table\ngt(police_summary_with_averages) %&gt;%\n  tab_header(\n    title = md(\"**Police Force Residency and Demographics**\"),\n    subtitle = md(\"*Percentage of police officers living in the city they serve, broken down by race*\")\n  ) %&gt;%\n  tab_spanner(\n    label = \"Percentage of Officers Living in the City\",\n    columns = c(all, white, non_white, black, hispanic, asian)\n  ) %&gt;%\n  fmt_number(\n    columns = c(all, white, non_white, black, hispanic, asian, police_force_size),\n    decimals = 1\n  ) %&gt;%\n  data_color(\n    columns = c(all, white, non_white, black, hispanic, asian),\n    fn = function(x) sapply(x, color_transparency)  # Applying the color function\n  ) %&gt;%\n  cols_label(\n    city = \"City\",\n    police_force_size = \"Total Officers\",\n    all = \"Total (%)\",\n    white = \"White (%)\",\n    non_white = \"Non-White (%)\",\n    black = \"Black (%)\",\n    hispanic = \"Hispanic (%)\",\n    asian = \"Asian (%)\"\n  ) %&gt;%\n  tab_footnote(\n    footnote = \"Data represents the available statistics on police force residency based on FiveThirtyEight.\",\n    locations = cells_title(groups = \"title\")\n  ) %&gt;%\n  tab_caption(\"Table 1: Residency rates of police officers by race across 10 major U.S. cities.\")\n\n\n\n\n\nTable 1: Residency rates of police officers by race across 10 major U.S. cities.\n\n\n\n\n\n\n\n\n\n\n\n\nPolice Force Residency and Demographics1\n\n\nPercentage of police officers living in the city they serve, broken down by race\n\n\nCity\nTotal Officers\n\nPercentage of Officers Living in the City\n\n\n\nTotal (%)\nWhite (%)\nNon-White (%)\nBlack (%)\nHispanic (%)\nAsian (%)\n\n\n\n\nNew York\n32,300.0\n0.6\n0.4\n0.8\n0.8\n0.8\n0.7\n\n\nChicago\n12,120.0\n0.9\n0.9\n0.9\n0.9\n0.8\n1.0\n\n\nLos Angeles\n10,100.0\n0.2\n0.2\n0.3\n0.4\n0.2\n0.3\n\n\nWashington\n9,340.0\n0.1\n0.1\n0.2\n0.2\n0.1\n0.2\n\n\nHouston\n7,700.0\n0.3\n0.2\n0.4\n0.4\n0.5\n0.4\n\n\nPhiladelphia\n6,045.0\n0.8\n0.8\n0.9\n0.9\n0.8\n0.0\n\n\nPhoenix\n4,475.0\n0.3\n0.3\n0.4\n0.5\n0.4\n0.0\n\n\nSan Diego\n4,460.0\n0.4\n0.4\n0.3\n0.5\n0.3\n0.5\n\n\nDallas\n3,605.0\n0.2\n0.2\n0.2\n0.2\n0.3\n0.0\n\n\nDetroit\n3,265.0\n0.4\n0.1\n0.5\n0.6\n0.3\n0.0\n\n\nAverage\n9,341.0\n0.4\n0.3\n0.5\n0.5\n0.5\n0.3\n\n\n\n1 Data represents the available statistics on police force residency based on FiveThirtyEight.\n\n\n\n\n\n\n\n\nOnce I obtained the table, I asked chatGPT to color code the cells by using the prompt: fix this code such that the values if below 25% show 75% transparent orange, if 25%-50% show 50% transparent orange, 50-75 show 25%, and 75 over show 100% opaque color"
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda.html",
    "href": "starter-analysis-exercise/code/eda-code/eda.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at /Users/annalisecramer/MADA/prasangapaudel-MADA-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          5     \n_______________________          \nColumn type frequency:           \n  character                1     \n  factor                   1     \n  numeric                  3     \n________________________         \nGroup variables            None  \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate min max empty n_unique whitespace\n1 Country               0             1   6  24     0        3          0\n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean    sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0  133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2   45  55  70  80  110 ▇▂▃▂▂\n3 Age                   0             1  28.9  8.99  18  22  30  32   47 ▆▂▇▁▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/readme.html",
    "href": "starter-analysis-exercise/code/eda-code/readme.html",
    "title": "Prasanga Paudel's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory data analysis (EDA) on the processed/cleaned data. The code produces a few tables and figures, which are saved in the appropriate results sub-folder."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at /Users/annalisecramer/MADA/prasangapaudel-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata2.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name` `Variable Definition`                  `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                  &lt;chr&gt;                 \n1 Height          height in centimeters                  numeric value &gt;0 or NA\n2 Weight          weight in kilograms                    numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other)  M/F/O/NA              \n4 Country         country of origin ( USA/Mexico/Canada) USA/Mexico/Canada     \n5 Age             age in years                           numeric value &gt;0 or NA\n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height  &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\",…\n$ Weight  &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender  &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"…\n$ Country &lt;chr&gt; \"USA\", \"Mexico\", \"USA\", \"Canada\", \"Mexico\", \"Mexico\", \"Canada\"…\n$ Age     &lt;dbl&gt; 34, 32, 25, 26, 45, 22, 47, 30, 23, 30, 22, 18, 32, 19\n\nsummary(rawdata)\n\n    Height              Weight          Gender            Country         \n Length:14          Min.   :  45.0   Length:14          Length:14         \n Class :character   1st Qu.:  55.0   Class :character   Class :character  \n Mode  :character   Median :  70.0   Mode  :character   Mode  :character  \n                    Mean   : 602.7                                        \n                    3rd Qu.:  90.0                                        \n                    Max.   :7000.0                                        \n                    NA's   :1                                             \n      Age       \n Min.   :18.00  \n 1st Qu.:22.25  \n Median :28.00  \n Mean   :28.93  \n 3rd Qu.:32.00  \n Max.   :47.00  \n                \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender Country   Age\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;dbl&gt;\n1 180        80 M      USA        34\n2 175        70 O      Mexico     32\n3 sixty      60 F      USA        25\n4 178        76 F      Canada     26\n5 192        90 NA     Mexico     45\n6 6          55 F      Mexico     22\n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nCountry\n0\n1\n3\n6\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55.00\n70\n90\n7000\n▇▁▁▁▁\n\n\nAge\n0\n1.00\n28.93\n8.79\n18\n22.25\n28\n32\n47\n▇▃▇▁▃\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nCountry\n0\n1\n3\n6\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nAge\n0\n1.00\n29.23\n9.08\n18\n22.00\n30\n32\n47\n▇▂▇▁▃\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nCountry\n0\n1\n3\n6\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nAge\n0\n1.00\n29.23\n9.08\n18\n22.00\n30\n32\n47\n▇▂▇▁▃\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nCountry\n0\n1\n3\n6\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nAge\n0\n1\n29.82\n9.65\n18\n22.5\n30\n33\n47\n▇▂▇▁▃\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nCountry\n0\n1\n3\n6\n0\n3\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nAge\n0\n1\n29.82\n9.65\n18\n22.5\n30\n33\n47\n▇▂▇▁▃\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nCountry\n0\n1\n3\n6\n0\n3\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nAge\n0\n1\n28.89\n8.99\n18\n22\n30\n32\n47\n▆▂▇▁▂\n\n\n\n\n\nAll done, data is clean now.\nIn Country, Mexico and Canada have been given their full names, whereas USA is an abbreviation. Let’s recode this variable to align with the naming convention.\n\nd4$Country &lt;- recode(d4$Country, \"USA\" = \"United States of America\")\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nCountry\n0\n1\n6\n24\n0\n3\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nAge\n0\n1\n28.89\n8.99\n18\n22\n30\n32\n47\n▆▂▇▁▂\n\n\n\n\n\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/readme.html",
    "href": "starter-analysis-exercise/code/readme.html",
    "title": "Prasanga Paudel's Data Analysis Portfolio",
    "section": "",
    "text": "Place your various R or Quarto files in the appropriate folders.\nYou can either have fewer large scripts, or multiple scripts that do only specific actions. Those can be R or Quarto files. In either case, document the scripts and what goes on in them so well that someone else (including future you) can easily figure out what is happening.\nThe scripts should load the appropriate data (e.g. raw or processed), perform actions, and save results (e.g. processed data, figures, computed values) in the appropriate folders. Document somewhere what inputs each script takes and where output is placed.\nIf scripts need to be run in a specific order, document this. Either as comments in the script, or in a separate text file such as this readme file. Ideally of course in both locations.\nDepending on your specific project, you might want to have further folders/sub-folders."
  },
  {
    "objectID": "starter-analysis-exercise/data/readme.html",
    "href": "starter-analysis-exercise/data/readme.html",
    "title": "Prasanga Paudel's Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all data at various stages.\nThis data is being loaded/manipulated/changed/saved with code from the code folders.\nYou should place the raw data in the raw_data folder and not edit it. Ever!\nIdeally, load the raw data into R and do all changes there with code, so everything is automatically reproducible and documented.\nSometimes, you need to edit the files in the format you got. For instance, Excel files are sometimes so poorly formatted that it’s close to impossible to read them into R, or the persons you got the data from used color to code some information, which of course won’t import into R. In those cases, you might have to make modifications in a software other than R. If you need to make edits in whatever format you got the data (e.g. Excel), make a copy and place those copies in a separate folder, AND ONLY EDIT THOSE COPIES. Also, write down somewhere the edits you made.\nAdd as many sub-folders as suitable. If you only have a single processing step, one sub-folder for processed data is enough. If you have multiple stages of cleaning and processing, additional sub-folders might be useful. Adjust based on the complexity of your project.\nI suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data:\nhttp://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "",
    "text": "The structure below is one possible setup for a data analysis project (including the course project). For a manuscript, adjust as needed. You don’t need to have exactly these sections, but the content covering those sections should be addressed.\nThis uses MS Word as output format. See here for more information. You can switch to other formats, like html or pdf. See the Quarto documentation for other formats."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.1 General Background Information",
    "text": "2.1 General Background Information\nProvide enough background on your topic that others can understand the why and how of your analysis"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.2 Description of data and data source",
    "text": "2.2 Description of data and data source\nThe dataset contains information on three variables height, weight, and gender. Two additional variables have been added to the original data, one is Country, representing the country of origin and the other is Age, representing the age in years"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.3 Questions/Hypotheses to be addressed",
    "text": "2.3 Questions/Hypotheses to be addressed\nState the research questions you plan to answer with this analysis.\nTo cite other work (important everywhere, but likely happens first in introduction), make sure your references are in the bibtex file specified in the YAML header above (here dataanalysis_template_references.bib) and have the right bibtex key. Then you can include like this:\nExamples of reproducible research projects can for instance be found in (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, Shen, & Handel, 2020)"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.1 Data aquisition",
    "text": "3.1 Data aquisition\nAs applicable, explain where and how you got the data. If you directly import the data from an online source, you can combine this section with the next."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.2 Data import and cleaning",
    "text": "3.2 Data import and cleaning\nWrite code that reads in the file and cleans it so it’s ready for analysis. Since this will be fairly long code for most datasets, it might be a good idea to have it in one or several R scripts. If that is the case, explain here briefly what kind of cleaning/processing you do, and provide more details and well documented code somewhere (e.g. as supplement in a paper). All materials, including files that contain code, should be commented well so everyone can follow along."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.3 Statistical analysis",
    "text": "3.3 Statistical analysis\nExplain anything related to your statistical analyses."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.1 Exploratory/Descriptive analysis",
    "text": "4.1 Exploratory/Descriptive analysis\nUse a combination of text/tables/figures to explore and describe your data. Show the most important descriptive results here. Additional ones should go in the supplement. Even more can be in the R and Quarto files that are part of your project.\nTable 1 shows a summary of the data.\nNote the loading of the data providing a relative path using the ../../ notation. (Two dots means a folder up). You never want to specify an absolute path like C:\\ahandel\\myproject\\results\\ because if you share this with someone, it won’t work for them since they don’t have that path. You can also use the here R package to create paths. See examples of that below. I recommend the here package, but I’m showing the other approach here just in case you encounter it.\n\n\n\n\nTable 1: Data summary table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_type\nskim_variable\nn_missing\ncomplete_rate\ncharacter.min\ncharacter.max\ncharacter.empty\ncharacter.n_unique\ncharacter.whitespace\nfactor.ordered\nfactor.n_unique\nfactor.top_counts\nnumeric.mean\nnumeric.sd\nnumeric.p0\nnumeric.p25\nnumeric.p50\nnumeric.p75\nnumeric.p100\nnumeric.hist\n\n\n\n\ncharacter\nCountry\n0\n1\n6\n24\n0\n3\n0\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nfactor\nGender\n0\n1\nNA\nNA\nNA\nNA\nNA\nFALSE\n3\nM: 4, F: 3, O: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nnumeric\nHeight\n0\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n165.66667\n15.976545\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nnumeric\nWeight\n0\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n70.11111\n21.245261\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nnumeric\nAge\n0\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n28.88889\n8.992281\n18\n22\n30\n32\n47\n▆▂▇▁▂"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.2 Basic statistical analysis",
    "text": "4.2 Basic statistical analysis\nTo get some further insight into your data, if reasonable you could compute simple statistics (e.g. simple models with 1 predictor) to look for associations between your outcome(s) and each individual predictor variable. Though note that unless you pre-specified the outcome and main exposure, any “p&lt;0.05 means statistical significance” interpretation is not valid.\nFigure 1 shows a scatterplot figure produced by one of the R scripts.\n\n\n\n\n\n\n\n\nFigure 1: Height and weight stratified by gender."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.3 Full analysis",
    "text": "4.3 Full analysis\nUse one or several suitable statistical/machine learning methods to analyze your data and to produce meaningful figures, tables, etc. This might again be code that is best placed in one or several separate R scripts that need to be well documented. You want the code to produce figures and data ready for display as tables, and save those. Then you load them here.\nExample Table 2 shows a summary of a linear model fit.\n\n\n\n\nTable 2: Linear model fit table.\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n149.2726967\n23.3823360\n6.3839942\n0.0013962\n\n\nWeight\n0.2623972\n0.3512436\n0.7470519\n0.4886517\n\n\nGenderM\n-2.1244913\n15.5488953\n-0.1366329\n0.8966520\n\n\nGenderO\n-4.7644739\n19.0114155\n-0.2506112\n0.8120871"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#new-table",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#new-table",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.4 New table",
    "text": "4.4 New table\nThis following table shows a summary of the new linear model fit using the two new variables: Age and Country\n\n\n\n\nTable 3: NEW Linear model fit table.\n\n\n\n\n\n\n\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n154.5667244\n25.6045758\n6.0366837\n0.0017964\n\n\nAge\n0.2928943\n0.7811139\n0.3749700\n0.7230618\n\n\nCountryMexico\n2.0680243\n13.7251740\n0.1506738\n0.8861230\n\n\nCountryUnited States of America\n15.4748700\n21.1550684\n0.7314970\n0.4973029"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#new-figure-1-box-plot",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#new-figure-1-box-plot",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.5 New Figure 1: Box Plot",
    "text": "4.5 New Figure 1: Box Plot\nThe following figure shows the boxplot of Height and Country. It can be seen that height of different countries are not significantly different.\n\n\n\n\n\n\n\n\nFigure 2: Height and Country boxplot."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#new-figure-2-scatterplot",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#new-figure-2-scatterplot",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.6 New Figure 2: Scatterplot",
    "text": "4.6 New Figure 2: Scatterplot\nThe following figure shows the scatterplot of Age against Weight. It can be seen that age and weight are positively correlated.\n\n\n\n\n\n\n\n\nFigure 3: Age Vs Weight scatterplot ."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.1 Summary and Interpretation",
    "text": "5.1 Summary and Interpretation\nSummarize what you did, what you found and what it means."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.2 Strengths and Limitations",
    "text": "5.2 Strengths and Limitations\nDiscuss what you perceive as strengths and limitations of your analysis."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.3 Conclusions",
    "text": "5.3 Conclusions\nWhat are the main take-home messages?\nInclude citations in your Rmd file using bibtex, the list of references will automatically be placed at the end\nThis paper (Leek & Peng, 2015) discusses types of analyses.\nThese papers (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, et al., 2020) are good examples of papers published using a fully reproducible setup similar to the one shown in this template.\nNote that this cited reference will show up at the end of the document, the reference formatting is determined by the CSL file specified in the YAML header. Many more style files for almost any journal are available. You also specify the location of your bibtex reference file in the YAML. You can call your reference file anything you like, I just used the generic word references.bib but giving it a more descriptive name is probably better."
  },
  {
    "objectID": "starter-analysis-exercise/results/readme.html",
    "href": "starter-analysis-exercise/results/readme.html",
    "title": "Prasanga Paudel's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains results produced by the code, such as figures and tables.\nDepending on the size and type of your project, you can either place it all in a single folder or create sub-folders. For instance you could create a folder for figures, another for tables. Or you could create a sub-folder for dataset 1, another for dataset 2. Or you could have a subfolder for exploratory analysis, another for final analysis. The options are endless, choose whatever makes sense for your project. For this template, there is just a a single folder, but having sub-folders is often a good idea."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#computing-the-total-amount-of-drug-for-each-individual-by-adding-all-the-dv-values",
    "href": "fitting-exercise/fitting-exercise.html#computing-the-total-amount-of-drug-for-each-individual-by-adding-all-the-dv-values",
    "title": "Model Fitting Exercise",
    "section": "3.3 Computing the total amount of drug for each individual by adding all the DV values",
    "text": "3.3 Computing the total amount of drug for each individual by adding all the DV values\nHere, we will compute the total amount of drug for each individual by adding all the DV values.\n\nsummarized_data &lt;- Mavoglurant_data_filtered %&gt;%\n  group_by(ID) %&gt;%\n  summarize(Y = sum(DV, na.rm = TRUE))\n\n\ndim(summarized_data) # checking dimension\n\n[1] 120   2\n\n\nNow, we will create a dataframe that contains only the observations where TIME == 0, and then we will check the dimensions to see if it is correctly created.\n\n# creating a data frame that contains only the observations where TIME == 0\ntime_zero_data &lt;- Mavoglurant_data_OCC1 %&gt;%\n  filter(TIME == 0)\n\ndim(time_zero_data) # checking dimension\n\n[1] 120  17\n\n\nNow, we will create a new dataframe using the join function and then we will check the dimensions to see if it is correctly created.\n\n# using the join function to combine those two data frames\nfinal_data &lt;- time_zero_data %&gt;%\n  left_join(summarized_data, by = \"ID\")\n\n\ndim(final_data) # checking dimension\n\n[1] 120  18"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#fitting-a-linear-model-using-only-dose-as-the-predictor",
    "href": "fitting-exercise/fitting-exercise.html#fitting-a-linear-model-using-only-dose-as-the-predictor",
    "title": "Model Fitting Exercise",
    "section": "5.1 Fitting a linear model using only DOSE as the predictor",
    "text": "5.1 Fitting a linear model using only DOSE as the predictor\n\n# Fitting a linear model using only DOSE as the predictor\nmodel_dose &lt;- lm(Y ~ DOSE, data = final_data_cleaned)\n\nsummary(model_dose)\n\n\nCall:\nlm(formula = Y ~ DOSE, data = final_data_cleaned)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1284.91  -441.14   -97.22   325.84  2372.87 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  323.062    199.049   1.623    0.107    \nDOSE          58.213      5.194  11.208   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 672.1 on 118 degrees of freedom\nMultiple R-squared:  0.5156,    Adjusted R-squared:  0.5115 \nF-statistic: 125.6 on 1 and 118 DF,  p-value: &lt; 2.2e-16\n\n\nWe can observe that dose has an insignificant effect on Y."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#fitting-a-linear-model-using-all-predictor",
    "href": "fitting-exercise/fitting-exercise.html#fitting-a-linear-model-using-all-predictor",
    "title": "Model Fitting Exercise",
    "section": "5.2 Fitting a linear model using all predictor",
    "text": "5.2 Fitting a linear model using all predictor\n\n# Fit a linear model using all predictors\nmodel_all &lt;- lm(Y ~ DOSE + AGE + SEX + RACE + WT + HT, data = final_data_cleaned)\n\nsummary(model_all)\n\n\nCall:\nlm(formula = Y ~ DOSE + AGE + SEX + RACE + WT + HT, data = final_data_cleaned)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1480.86  -367.81   -79.95   266.15  2431.52 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 3386.863   1835.153   1.846 0.067623 .  \nDOSE          59.935      4.880  12.281  &lt; 2e-16 ***\nAGE            3.155      7.825   0.403 0.687530    \nSEX2        -357.734    216.928  -1.649 0.101957    \nRACE2        155.034    128.627   1.205 0.230650    \nRACE7       -405.320    448.189  -0.904 0.367768    \nRACE88       -53.505    244.668  -0.219 0.827296    \nWT           -23.047      6.395  -3.604 0.000471 ***\nHT          -748.487   1103.979  -0.678 0.499188    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 614.3 on 111 degrees of freedom\nMultiple R-squared:  0.6193,    Adjusted R-squared:  0.5919 \nF-statistic: 22.57 on 8 and 111 DF,  p-value: &lt; 2.2e-16\n\n\nWe can observe that SEX2 and Wt has a significant effect on Y. But majority o the predictors are insignificant in the model. This has lead to an insufficient information to predict the dependent vriable and only around 10% variation in the dependent variable is explained by the model with all predictors. With only DOSE the performance is even poorer."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#computing-rmse-and-r-squared-for-both-models",
    "href": "fitting-exercise/fitting-exercise.html#computing-rmse-and-r-squared-for-both-models",
    "title": "Model Fitting Exercise",
    "section": "5.3 computing RMSE and R-squared for both models",
    "text": "5.3 computing RMSE and R-squared for both models\nHere, we will compute the RMSE and R-squared for the both the models discussed above.\n\n# creating function to compute RMSE and R-squared\ncompute_metrics &lt;- function(model, data) {\n  # Predictions\n  predictions &lt;- predict(model, newdata = data)\n  \n  # Actual values\n  actual &lt;- data$Y\n  \n  # Computing RMSE\n  rmse &lt;- sqrt(mean((actual - predictions)^2))\n  \n  # Compute R-squared\n  r_squared &lt;- summary(model)$r.squared\n  \n\n  return(list(RMSE = rmse, R_squared = r_squared))\n}\n\n# Computing metrics for the DOSE-only model\nmetrics_dose &lt;- compute_metrics(model_dose, final_data_cleaned)\n\n# Computing metrics for the all-predictors model\nmetrics_all &lt;- compute_metrics(model_all, final_data_cleaned)\n\n# Creatin a data frame with the results\nresults_table &lt;- data.frame(\n  Model = c(\"DOSE Only\", \"All Predictors\"),\n  RMSE = c(metrics_dose$RMSE, metrics_all$RMSE),\n  R_squared = c(metrics_dose$R_squared, metrics_all$R_squared)\n)\n\nkable(results_table, caption = \"Model Performance Metrics\", align = \"c\")\n\n\nModel Performance Metrics\n\n\nModel\nRMSE\nR_squared\n\n\n\n\nDOSE Only\n666.4618\n0.5156446\n\n\nAll Predictors\n590.8535\n0.6193084\n\n\n\n\n\nThis tables shows the model performance with Y as dependent variable. “All predictor” model has a lower RMSE and explains the variation in dependent variable better that the “Dose only” model."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#fiting-a-logistic-model-using-only-dose-as-the-predictor",
    "href": "fitting-exercise/fitting-exercise.html#fiting-a-logistic-model-using-only-dose-as-the-predictor",
    "title": "Model Fitting Exercise",
    "section": "6.1 Fiting a logistic model using only DOSE as the predictor",
    "text": "6.1 Fiting a logistic model using only DOSE as the predictor\n\n# Ensuring SEX is a binary factor\nfinal_data_cleaned &lt;- final_data_cleaned %&gt;%\n  mutate(SEX = factor(SEX))\n\n# Fiting a logistic model using only DOSE as the predictor\nlogistic_dose &lt;- glm(SEX ~ DOSE, data = final_data_cleaned, family = binomial())\nsummary(logistic_dose)\n\n\nCall:\nglm(formula = SEX ~ DOSE, family = binomial(), data = final_data_cleaned)\n\nCoefficients:\n            Estimate Std. Error z value Pr(&gt;|z|)\n(Intercept) -0.76482    0.85395  -0.896    0.370\nDOSE        -0.03175    0.02432  -1.306    0.192\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 94.242  on 119  degrees of freedom\nResidual deviance: 92.431  on 118  degrees of freedom\nAIC: 96.431\n\nNumber of Fisher Scoring iterations: 5\n\n\nWe can observe that DOSE does not significantly affect SEX."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#fitting-a-logistic-model-using-all-predictors",
    "href": "fitting-exercise/fitting-exercise.html#fitting-a-logistic-model-using-all-predictors",
    "title": "Model Fitting Exercise",
    "section": "6.2 Fitting a logistic model using all predictors",
    "text": "6.2 Fitting a logistic model using all predictors\n\n# Fit a logistic model using all predictors\nlogistic_all &lt;- glm(SEX ~ DOSE + AGE + RACE + WT + HT + Y, data = final_data_cleaned, family = binomial())\n\n\nsummary(logistic_all)\n\n\nCall:\nglm(formula = SEX ~ DOSE + AGE + RACE + WT + HT + Y, family = binomial(), \n    data = final_data_cleaned)\n\nCoefficients:\n              Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)  6.033e+01  1.804e+01   3.345 0.000824 ***\nDOSE        -3.076e-02  7.761e-02  -0.396 0.691893    \nAGE          8.340e-02  6.074e-02   1.373 0.169724    \nRACE2       -1.927e+00  1.375e+00  -1.402 0.160967    \nRACE7        1.176e-01  3.846e+00   0.031 0.975604    \nRACE88      -1.500e+00  2.195e+00  -0.683 0.494317    \nWT          -6.283e-02  7.942e-02  -0.791 0.428908    \nHT          -3.320e+01  1.108e+01  -2.995 0.002744 ** \nY           -1.040e-03  9.628e-04  -1.081 0.279840    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 94.242  on 119  degrees of freedom\nResidual deviance: 32.077  on 111  degrees of freedom\nAIC: 50.077\n\nNumber of Fisher Scoring iterations: 8\n\n\nWe can observe that HT significantly affect SEX. We will need to check the Accuracy and AUC values to tell about the performance of the model."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#computing-accuracy-and-roc-auc-for-both-the-models",
    "href": "fitting-exercise/fitting-exercise.html#computing-accuracy-and-roc-auc-for-both-the-models",
    "title": "Model Fitting Exercise",
    "section": "6.3 Computing accuracy and ROC-AUC for both the models",
    "text": "6.3 Computing accuracy and ROC-AUC for both the models\nHere, we will compute accuracy and ROC-AUC for both the models discussed above with SEX as dependent variable.\n\n# Function to compute accuracy and ROC-AUC\ncompute_metrics_logistic &lt;- function(model, data) {\n  # Predict probabilities\n  predicted_probs &lt;- predict(model, newdata = data, type = \"response\")\n  \n  # Convert probabilities to binary predictions (0 or 1)\n  predicted_classes &lt;- ifelse(predicted_probs &gt; 0.5, 1, 0)\n  \n  # Actual classes\n  actual_classes &lt;- as.numeric(data$SEX) - 1  # Convert factor to numeric (0 or 1)\n  \n  # Compute accuracy\n  accuracy &lt;- mean(predicted_classes == actual_classes)\n  \n  # Compute ROC-AUC\n  roc_auc &lt;- roc(actual_classes, predicted_probs)$auc\n  \n  # Return metrics\n  return(list(Accuracy = accuracy, ROC_AUC = roc_auc))\n}\n\n# Compute metrics for the DOSE-only model\nmetrics_dose &lt;- compute_metrics_logistic(logistic_dose, final_data_cleaned)\n\nSetting levels: control = 0, case = 1\n\n\nSetting direction: controls &lt; cases\n\n# Compute metrics for the all-predictors model\nmetrics_all &lt;- compute_metrics_logistic(logistic_all, final_data_cleaned)\n\nSetting levels: control = 0, case = 1\nSetting direction: controls &lt; cases\n\nresults_table_logistic &lt;- data.frame(\n  Model = c(\"DOSE Only\", \"All Predictors\"),\n  Accuracy = c(metrics_dose$Accuracy, metrics_all$Accuracy),\n  ROC_AUC = c(metrics_dose$ROC_AUC, metrics_all$ROC_AUC)\n)\n\n# Print the table using kable\nkable(results_table_logistic, caption = \"Logistic Model Performance Metrics\", align = \"c\")\n\n\nLogistic Model Performance Metrics\n\n\nModel\nAccuracy\nROC_AUC\n\n\n\n\nDOSE Only\n0.8666667\n0.5919471\n\n\nAll Predictors\n0.9416667\n0.9795673\n\n\n\n\n\nThe table above shows the accuracy and ROC-AUC for both the models discussed above with SEX as dependent variable. The AUC value for DOSE only slightly better than a random model. The AUC value for All predictors is close to 1 implying a nearly perfect prediction performance. I personally find this very surprising that we can predict SEX so perfectly.The accuracy for “all predictor” model is also better."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#plotting-dv-on-y-axis-and-time-on-x-axis",
    "href": "fitting-exercise/fitting-exercise.html#plotting-dv-on-y-axis-and-time-on-x-axis",
    "title": "Model Fitting Exercise",
    "section": "3.1 Plotting DV on Y-axis and TIME on X-axis",
    "text": "3.1 Plotting DV on Y-axis and TIME on X-axis\nHere, we will write a code to make a plot that shows a line for each individual, with DV on the y-axis and time on the x-axis, stratified by dose ( using a different color for each dose).\n\n# Creating a line plot with different colors for each dose\nggplot(Mavoglurant_data, aes(x = TIME, y = DV, group = ID, color = factor(DOSE))) +\n  geom_line() +\n  labs(title = \"DV over Time by ID\",\n       x = \"Time\",\n       y = \"DV\",\n       color = \"Dose\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThis figures show the three doses in three colors. The DOSE 37.5 is not visible in this graph, probably because it is less frequent."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#making-some-useful-summary-tables",
    "href": "fitting-exercise/fitting-exercise.html#making-some-useful-summary-tables",
    "title": "Model Fitting Exercise",
    "section": "4.1 Making some useful summary tables",
    "text": "4.1 Making some useful summary tables\nHere, we create a summary table of all the variables we have in our final dataset.\n\n# Calculating summary statistics for variables\nsummary_stats &lt;- final_data_cleaned %&gt;%\n  summarise(across(c(Y, DOSE, AGE, WT, HT), \n                 list(Mean = ~ mean(., na.rm = TRUE),\n    Min = ~ min(., na.rm = TRUE),\n    Max = ~ max(., na.rm = TRUE),\n    SD = ~ sd(., na.rm = TRUE))))\n\n# Reshaping the data to better present it\nsummary_stats &lt;- summary_stats %&gt;%\n  pivot_longer(cols = everything(), \n               names_to = c(\"Variable\", \".value\"), \n               names_sep = \"_\")\n\n# Printing the summary statistics as a  table format\nkable(summary_stats, caption = \"Summary Statistics\", align = \"c\")\n\n\nSummary Statistics\n\n\nVariable\nMean\nMin\nMax\nSD\n\n\n\n\nY\n2445.40733\n826.430000\n5606.58000\n961.6351038\n\n\nDOSE\n36.45833\n25.000000\n50.00000\n11.8622315\n\n\nAGE\n33.00000\n18.000000\n50.00000\n8.9761589\n\n\nWT\n82.55417\n56.600000\n115.30000\n12.5211881\n\n\nHT\n1.75901\n1.520031\n1.93012\n0.0855081\n\n\n\n\n\nThis table represennts the summary statistics of the 5 variables."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#setting-random-seed-1234",
    "href": "fitting-exercise/fitting-exercise.html#setting-random-seed-1234",
    "title": "Model Fitting Exercise",
    "section": "7.1 Setting random seed (1234)",
    "text": "7.1 Setting random seed (1234)\nIn this section, we will use CV technique to split the train-data into 90%-10% analysis dataset and assessment dataset, and compare the RMSE values.\n\nset.seed(rngseed) # setting seed based on rngseed\nfolds &lt;- vfold_cv(train_data, v = 10) # creating 10 folds\nfolds\n\n#  10-fold cross-validation \n# A tibble: 10 × 2\n   splits         id    \n   &lt;list&gt;         &lt;chr&gt; \n 1 &lt;split [81/9]&gt; Fold01\n 2 &lt;split [81/9]&gt; Fold02\n 3 &lt;split [81/9]&gt; Fold03\n 4 &lt;split [81/9]&gt; Fold04\n 5 &lt;split [81/9]&gt; Fold05\n 6 &lt;split [81/9]&gt; Fold06\n 7 &lt;split [81/9]&gt; Fold07\n 8 &lt;split [81/9]&gt; Fold08\n 9 &lt;split [81/9]&gt; Fold09\n10 &lt;split [81/9]&gt; Fold10\n\n\n\n# Initializing vectors to store RMSE results\nrmse_m1 &lt;- numeric(10)\nrmse_m2 &lt;- numeric(10)\nanalyze_size &lt;- numeric(10)   \nassessment_size &lt;- numeric(10)   \n\n# Looping through each fold\nfor (i in 1:10) {\n  # Splitting  the data into analysis and assessment datasets\n  analysis_data &lt;- analysis(folds$splits[[i]])  # 90% analysis data\n  assessment_data &lt;- assessment(folds$splits[[i]])  # 10% assessment data\n\n  # Storing sample sizes\n  analyze_size[i] &lt;- nrow(analysis_data)  \n  assessment_size[i] &lt;- nrow(assessment_data) \n\n  # Fitting Model 1 (m1): Y ~ DOSE\n  m1 &lt;- lm(Y ~ DOSE, data = analysis_data)\n  predictions_m1 &lt;- predict(m1, newdata = assessment_data)\n  rmse_m1[i] &lt;- sqrt(mean((assessment_data$Y - predictions_m1)^2)) #RMSE for m1\n\n  # Fit Model 2 (m2): Y ~ DOSE + AGE + SEX + WT + HT\n  m2 &lt;- lm(Y ~ DOSE + AGE + SEX + WT + HT, data = analysis_data)\n  predictions_m2 &lt;- predict(m2, newdata = assessment_data)  # Corrected spelling\n  rmse_m2[i] &lt;- sqrt(mean((assessment_data$Y - predictions_m2)^2)) #RMSE for m2\n}\n\n# Combining results into a data frame\nresults &lt;- data.frame(\n  Fold = 1:10,\n  Analyze_Size = analyze_size,  \n  Assessment_Size = assessment_size,\n  RMSE_m1 = rmse_m1,\n  RMSE_m2 = rmse_m2\n)\n\n# Print results\nprint(results)\n\n   Fold Analyze_Size Assessment_Size  RMSE_m1  RMSE_m2\n1     1           81               9 601.7112 745.0822\n2     2           81               9 353.1293 480.0154\n3     3           81               9 804.4908 617.4291\n4     4           81               9 986.2232 971.0726\n5     5           81               9 600.5481 403.0282\n6     6           81               9 969.3069 765.3549\n7     7           81               9 516.3759 454.2764\n8     8           81               9 738.9720 522.0892\n9     9           81               9 482.5414 540.0483\n10   10           81               9 852.0989 958.5128\n\n\nWe can observe that in most of the cases, the RMSE of “NULL Model” is greater.\n\n# Compute average RMSE for each model\navg_rmse_m1 &lt;- mean(rmse_m1)\navg_rmse_m2 &lt;- mean(rmse_m2)\n\nprint(paste(\"Average RMSE for m1:\", avg_rmse_m1))\n\n[1] \"Average RMSE for m1: 690.539767935186\"\n\nprint(paste(\"Average RMSE for m2:\", avg_rmse_m2))\n\n[1] \"Average RMSE for m2: 645.690915863492\"\n\n\nBut, on average, the RMSE value for the NULL Model (m1) is greater than RMSE for m2\n\nse_rmse_m1 &lt;- sd(rmse_m1) / sqrt(10)\nprint(paste(\"Standard Error of RMSE for m1:\", se_rmse_m1))\n\n[1] \"Standard Error of RMSE for m1: 67.495093665314\"\n\n\n\nse_rmse_m2 &lt;- sd(rmse_m2) / sqrt(10)\nprint(paste(\"Standard Error of RMSE for m2:\", se_rmse_m2))\n\n[1] \"Standard Error of RMSE for m2: 64.8192708423115\"\n\n\nThe standard error for both the Model are fairly acceptable, and the RMSE across the 10 folds can be considered fairly consistent."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#changing-the-random-seed",
    "href": "fitting-exercise/fitting-exercise.html#changing-the-random-seed",
    "title": "Model Fitting Exercise",
    "section": "6.2 Changing the random seed",
    "text": "6.2 Changing the random seed\nHere, we will change the seeding value and do all the analysis again.\n\nset.seed(1212) # setting seed based on rngseed\nfolds &lt;- vfold_cv(train_data, v = 10) # creating 10 folds\nfolds\n\n#  10-fold cross-validation \n# A tibble: 10 × 2\n   splits         id    \n   &lt;list&gt;         &lt;chr&gt; \n 1 &lt;split [81/9]&gt; Fold01\n 2 &lt;split [81/9]&gt; Fold02\n 3 &lt;split [81/9]&gt; Fold03\n 4 &lt;split [81/9]&gt; Fold04\n 5 &lt;split [81/9]&gt; Fold05\n 6 &lt;split [81/9]&gt; Fold06\n 7 &lt;split [81/9]&gt; Fold07\n 8 &lt;split [81/9]&gt; Fold08\n 9 &lt;split [81/9]&gt; Fold09\n10 &lt;split [81/9]&gt; Fold10\n\n\n\n# Initialize vectors to store RMSE results\nrmse_m1 &lt;- numeric(10)\nrmse_m2 &lt;- numeric(10)\nanalyze_size &lt;- numeric(10)  # Corrected spelling\nassessment_size &lt;- numeric(10)  # Corrected spelling\n\n# Loop through each fold\nfor (i in 1:10) {\n  # Split data into analysis and assessment sets\n  analysis_data &lt;- analysis(folds$splits[[i]])  # 90% analysis data\n  assessment_data &lt;- assessment(folds$splits[[i]])  # 10% assessment data\n\n  # Store sample sizes\n  analyze_size[i] &lt;- nrow(analysis_data)  # Corrected variable name\n  assessment_size[i] &lt;- nrow(assessment_data)  # Corrected variable name\n\n  # Fit Model 1 (m1): Y ~ DOSE\n  m1 &lt;- lm(Y ~ DOSE, data = analysis_data)\n  predictions_m1 &lt;- predict(m1, newdata = assessment_data)\n  rmse_m1[i] &lt;- sqrt(mean((assessment_data$Y - predictions_m1)^2))\n\n  # Fit Model 2 (m2): Y ~ DOSE + AGE + SEX + WT + HT\n  m2 &lt;- lm(Y ~ DOSE + AGE + SEX + WT + HT, data = analysis_data)\n  predictions_m2 &lt;- predict(m2, newdata = assessment_data)  # Corrected spelling\n  rmse_m2[i] &lt;- sqrt(mean((assessment_data$Y - predictions_m2)^2))\n}\n\n# Combine results into a data frame\nresults &lt;- data.frame(\n  Fold = 1:10,\n  Analyze_Size = analyze_size,  # Corrected variable name\n  Assessment_Size = assessment_size,  # Corrected variable name\n  RMSE_m1 = rmse_m1,\n  RMSE_m2 = rmse_m2\n)\n\n# Print results\nprint(results)\n\n   Fold Analyze_Size Assessment_Size  RMSE_m1  RMSE_m2\n1     1           81               9 946.5582 986.4273\n2     2           81               9 888.3070 827.9306\n3     3           81               9 499.2513 490.2751\n4     4           81               9 627.0722 462.7571\n5     5           81               9 707.1799 532.4521\n6     6           81               9 978.6113 888.6200\n7     7           81               9 633.9672 631.2505\n8     8           81               9 600.8176 516.9123\n9     9           81               9 601.9640 562.4362\n10   10           81               9 559.3245 536.5775\n\n# Compute average RMSE for each model\navg_rmse_m1 &lt;- mean(rmse_m1)\navg_rmse_m2 &lt;- mean(rmse_m2)\n\nprint(paste(\"Average RMSE for m1:\", avg_rmse_m1))\n\n[1] \"Average RMSE for m1: 704.305324618717\"\n\nprint(paste(\"Average RMSE for m2:\", avg_rmse_m2))\n\n[1] \"Average RMSE for m2: 643.563859453095\"\n\n\nIn most of the cases, the RMSE of NULL Model is higher that the model with all predictors. This is similar to the result obtained from previous seed. m1, on average, has a higher RMSE.\n\nse_rmse_m1 &lt;- sd(rmse_m1) / sqrt(10)\nprint(paste(\"Standard Error of RMSE for m1:\", se_rmse_m1))\n\n[1] \"Standard Error of RMSE for m1: 54.0532228695418\"\n\n\n\nse_rmse_m2 &lt;- sd(rmse_m2) / sqrt(10)\nprint(paste(\"Standard Error of RMSE for m2:\", se_rmse_m2))\n\n[1] \"Standard Error of RMSE for m2: 59.1000322630771\""
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#changing-the-random-seed-to-1212",
    "href": "fitting-exercise/fitting-exercise.html#changing-the-random-seed-to-1212",
    "title": "Model Fitting Exercise",
    "section": "7.2 Changing the random seed to: 1212",
    "text": "7.2 Changing the random seed to: 1212\nHere, we will change the seeding value and do all the analysis again.\n\nset.seed(1212) # setting seed based on rngseed\nfolds &lt;- vfold_cv(train_data, v = 10) # creating 10 folds\nfolds\n\n#  10-fold cross-validation \n# A tibble: 10 × 2\n   splits         id    \n   &lt;list&gt;         &lt;chr&gt; \n 1 &lt;split [81/9]&gt; Fold01\n 2 &lt;split [81/9]&gt; Fold02\n 3 &lt;split [81/9]&gt; Fold03\n 4 &lt;split [81/9]&gt; Fold04\n 5 &lt;split [81/9]&gt; Fold05\n 6 &lt;split [81/9]&gt; Fold06\n 7 &lt;split [81/9]&gt; Fold07\n 8 &lt;split [81/9]&gt; Fold08\n 9 &lt;split [81/9]&gt; Fold09\n10 &lt;split [81/9]&gt; Fold10\n\n\n\n# Initialize vectors to store RMSE results\nrmse_m1 &lt;- numeric(10)\nrmse_m2 &lt;- numeric(10)\nanalyze_size &lt;- numeric(10)  # Corrected spelling\nassessment_size &lt;- numeric(10)  # Corrected spelling\n\n# Loop through each fold\nfor (i in 1:10) {\n  # Split data into analysis and assessment sets\n  analysis_data &lt;- analysis(folds$splits[[i]])  # 90% analysis data\n  assessment_data &lt;- assessment(folds$splits[[i]])  # 10% assessment data\n\n  # Store sample sizes\n  analyze_size[i] &lt;- nrow(analysis_data)  # Corrected variable name\n  assessment_size[i] &lt;- nrow(assessment_data)  # Corrected variable name\n\n  # Fit Model 1 (m1): Y ~ DOSE\n  m1 &lt;- lm(Y ~ DOSE, data = analysis_data)\n  predictions_m1 &lt;- predict(m1, newdata = assessment_data)\n  rmse_m1[i] &lt;- sqrt(mean((assessment_data$Y - predictions_m1)^2))\n\n  # Fit Model 2 (m2): Y ~ DOSE + AGE + SEX + WT + HT\n  m2 &lt;- lm(Y ~ DOSE + AGE + SEX + WT + HT, data = analysis_data)\n  predictions_m2 &lt;- predict(m2, newdata = assessment_data)  # Corrected spelling\n  rmse_m2[i] &lt;- sqrt(mean((assessment_data$Y - predictions_m2)^2))\n}\n\n# Combine results into a data frame\nresults &lt;- data.frame(\n  Fold = 1:10,\n  Analyze_Size = analyze_size,  # Corrected variable name\n  Assessment_Size = assessment_size,  # Corrected variable name\n  RMSE_m1 = rmse_m1,\n  RMSE_m2 = rmse_m2\n)\n\n# Print results\nprint(results)\n\n   Fold Analyze_Size Assessment_Size  RMSE_m1  RMSE_m2\n1     1           81               9 946.5582 986.4273\n2     2           81               9 888.3070 827.9306\n3     3           81               9 499.2513 490.2751\n4     4           81               9 627.0722 462.7571\n5     5           81               9 707.1799 532.4521\n6     6           81               9 978.6113 888.6200\n7     7           81               9 633.9672 631.2505\n8     8           81               9 600.8176 516.9123\n9     9           81               9 601.9640 562.4362\n10   10           81               9 559.3245 536.5775\n\n# Compute average RMSE for each model\navg_rmse_m1 &lt;- mean(rmse_m1)\navg_rmse_m2 &lt;- mean(rmse_m2)\n\nprint(paste(\"Average RMSE for m1:\", avg_rmse_m1))\n\n[1] \"Average RMSE for m1: 704.305324618717\"\n\nprint(paste(\"Average RMSE for m2:\", avg_rmse_m2))\n\n[1] \"Average RMSE for m2: 643.563859453095\"\n\n\nIn most of the cases, the RMSE of NULL Model is higher that the model with all predictors. This is similar to the result obtained from previous seed. m1, on average, has a higher RMSE.\n\nse_rmse_m1 &lt;- sd(rmse_m1) / sqrt(10)\nprint(paste(\"Standard Error of RMSE for m1:\", se_rmse_m1))\n\n[1] \"Standard Error of RMSE for m1: 54.0532228695418\"\n\n\n\nse_rmse_m2 &lt;- sd(rmse_m2) / sqrt(10)\nprint(paste(\"Standard Error of RMSE for m2:\", se_rmse_m2))\n\n[1] \"Standard Error of RMSE for m2: 59.1000322630771\"\n\n\nThe Standard Error decreased in both the cases when we use another random seed.\nThe following code is where ANNALISE CRAMER’s contribution begins:\nFirst, we will combine the non-cross validated models together into a dataframe.\n\n#create data frame with obs and pred values\ndf_predictions &lt;- rbind(\n  data.frame(Observed = train_data$Y, Predicted = predictions_m1, Model = \"m1\"),\n  data.frame(Observed = train_data$Y, Predicted = predictions_m2, Model = \"m2\"),\n  data.frame(Observed = train_data$Y, Predicted = predictions_null, Model = \"null_model\")\n)\n\nWarning in data.frame(Observed = train_data$Y, Predicted = predictions_m1, :\nrow names were found from a short variable and have been discarded\n\n\nWarning in data.frame(Observed = train_data$Y, Predicted = predictions_m2, :\nrow names were found from a short variable and have been discarded\n\n#check\nhead(df_predictions)\n\n  Observed Predicted Model\n1  3004.21  1882.275    m1\n2  1346.62  1882.275    m1\n3  2771.69  3205.372    m1\n4  2027.60  1882.275    m1\n5  2353.40  3205.372    m1\n6   826.43  2543.824    m1\n\n\nThen use ggplot to create a figure that plots (as symbols) observed values on the x-axis and predictions (from each of the 3 models, including the null model) on the y-axis. Use a different color and/or a different symbol to differentiate between the 3 model predictions. Alternatively, you can use facets. Let both x and y axes go from 0 to 5000 and add a 45 degree line. For a good model, the points will fall along that line, namely observed and predicted values agree - with some scatter.\nThis looks a little weird given the data is horizontally clustered, but after examining the models more closely I think it’s okay, the dose-only model is based off of 3 possible doses, and the null model is based off one value. None of these models looks particularly good.\n\nggplot(df_predictions, aes(x = Observed, y = Predicted, color = Model, shape = Model)) + #color and shape by model\n  geom_point(alpha = 0.6, size = 2) +  # Add points with transparency\n  geom_abline(intercept = 0, slope = 1, linetype = \"dashed\", color = \"black\") +  # 45-degree line\n  scale_x_continuous(limits = c(0, 5000)) +\n  scale_y_continuous(limits = c(0, 5000)) +\n  labs(title = \"Model comparison\", \n       x = \"Observed\", \n       y = \"Predicted\",\n       color = \"Model\",\n       shape = \"Model\") +\n  theme_minimal()\n\nWarning: Removed 3 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n#exploring data\n#plot(m1)\n#plot(m2)\n#plot(null_model)\n\nOur next plot will be for model 2, plotting predicted versus residuals (the latter being just residuals = predicted-observed). Also add a straight line at 0. Make sure your y-axis goes the same amount into the positive and negative direction.\nThe residuals have a pattern, a general negative to positive diagonal trend. This means the model isn’t capturing some aspect of the data.\n\n#make a dataframe of only model2\nm2df &lt;- df_predictions[df_predictions$Model == \"m2\", ]\nm2df$Residuals &lt;- m2df$Predicted - m2df$Observed\n\n#plot(m2, which = 1) #I have to do it using ggplot\n\nggplot(m2df, aes(x = Predicted, y = Residuals)) +\n  geom_point(color = \"blue\", alpha = 0.6, size = 2) +  # Scatter points\n  geom_hline(yintercept = 0, linetype = \"solid\", color = \"red\") +  # Line at y = 0 #red line at 0\n  scale_y_continuous(limits = c(-4500, 4500)) +  # Symmetric y-axis\n  scale_x_continuous(limits = c(-4500, 4500)) +  # X-axis limit\n  labs(title = \"Model 2\", \n       x = \"Observed\", \n       y = \"Predicted\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nOn to our next task, focusing on model 2 with 100 boostrapped values based on the training data.\nNext, write a loop (or use a map or apply function) to fit the model to each of the bootstrap samples and make predictions from this model for the original training data. Record all predictions (e.g., in an array or a list).\nOnce you have all your predictions stored, compute the mean and confidence intervals.\nFinally, make a figure that plots observed values on the x-axis, and point estimate (obtained from your original predictions on the training data), as well as median and the upper and lower bounds - obtained by the bootstrap sampling and stored in pred on the y-axis. You can for instance use black symbols for original predictions (the point estimate, which is the mean), and some colors to indicate median and lower and upper confidence limits. As above, make sure x- and y-axis are on the same and add a 45 degree line.\nThis plot of values looks better than in the earlier plots, the values and their 95% CIs look closer to the 45 degree line. It’s hard to say if the light blue (original) or dark blue (bootstrapped) values are closer to the line, though, there’s many cases of each instance.\n\nlibrary(rsample)\nset.seed(rngseed) #set seed\n\ndat_bs &lt;- bootstraps(train_data, times = 100) #get 100 bootstrap samples\n\n#create boot to hold strapped values\nboot &lt;- matrix(0, nrow = length(dat_bs$splits), ncol = nrow(train_data))\n\n# for each repetition, fit the model, predict, and store answer\nfor (i in 1:length(dat_bs$splits)) {\n  dat_sample &lt;- rsample::analysis(dat_bs$splits[[i]]) #sample for ith iteration\n  m2_bs &lt;- lm(Y ~ DOSE + AGE + SEX + WT + HT, data = dat_sample) #fit model to particular sample\n  boot[i, ] &lt;- predict(m2_bs, newdata = train_data) #make pred based on training data\n}\n\n#obtain CIs at 95% \npreds &lt;- boot |&gt; apply(2, quantile,  c(0.025, 0.5, 0.975)) |&gt;  t()\npreds\n\n          2.5%      50%    97.5%\n [1,] 3083.086 3335.818 3586.619\n [2,] 1645.772 1945.359 2232.636\n [3,] 2556.181 2764.634 2974.479\n [4,] 1722.745 2085.856 2435.738\n [5,] 2645.607 2933.091 3197.893\n [6,] 1001.184 1298.528 1547.160\n [7,] 2120.113 2427.685 2754.229\n [8,] 1582.127 1938.921 2382.916\n [9,] 1211.196 1546.862 1967.511\n[10,] 2419.820 2554.059 2744.214\n[11,] 1220.525 1565.327 2003.809\n[12,] 1680.140 1906.337 2267.653\n[13,] 1963.337 2433.874 2847.347\n[14,] 2805.593 3276.160 3690.174\n[15,] 1712.263 2001.055 2275.725\n[16,] 1982.787 2253.406 2514.165\n[17,] 3127.308 3420.669 3812.924\n[18,] 2563.626 2939.237 3316.073\n[19,] 2044.218 2409.333 2939.849\n[20,] 3014.682 3272.769 3560.038\n[21,] 3624.556 3977.786 4294.207\n[22,] 2965.955 3230.275 3549.034\n[23,]  933.337 1269.008 1660.570\n[24,] 2293.417 2804.293 3260.645\n[25,] 2950.853 3195.367 3438.080\n[26,] 2743.969 3101.260 3385.651\n[27,] 2034.561 2496.206 2902.886\n[28,] 1308.932 1506.335 1701.775\n[29,] 1535.688 1798.228 2102.847\n[30,] 1586.228 2002.149 2379.341\n[31,] 2537.498 2823.863 3059.133\n[32,] 3347.101 3561.809 3900.550\n[33,] 1773.575 2024.578 2222.251\n[34,] 1059.686 1321.917 1582.583\n[35,] 1820.529 2108.049 2432.029\n[36,] 1513.723 1712.633 2000.361\n[37,] 2838.660 3215.788 3509.323\n[38,] 3218.373 3717.095 4134.972\n[39,] 1911.348 2176.087 2459.807\n[40,] 1363.121 1760.759 2162.315\n[41,] 1782.317 1970.964 2150.304\n[42,] 2003.307 2220.161 2446.982\n[43,] 1548.409 1857.165 2191.653\n[44,] 3675.085 3919.814 4270.190\n[45,] 3072.129 3341.018 3606.820\n[46,] 3021.513 3459.574 3833.266\n[47,] 1793.185 2041.159 2297.177\n[48,] 1956.867 2204.819 2471.235\n[49,] 3224.150 3470.434 3798.170\n[50,] 3192.962 3473.038 3810.793\n[51,] 2216.630 2425.340 2666.710\n[52,] 2595.574 2895.214 3202.939\n[53,] 2004.030 2172.967 2382.039\n[54,] 3322.559 3550.942 3897.471\n[55,] 2036.120 2278.101 2551.216\n[56,] 1521.596 1699.230 1871.231\n[57,] 2558.230 2872.049 3141.289\n[58,] 1639.396 2017.845 2496.949\n[59,] 2988.066 3309.233 3597.235\n[60,] 1751.329 1975.238 2193.251\n[61,] 2896.677 3109.538 3369.313\n[62,] 1610.451 1907.352 2412.278\n[63,] 1108.359 1372.599 1648.699\n[64,] 3200.990 3372.227 3627.584\n[65,] 1423.137 1706.032 2027.035\n[66,] 2986.645 3276.261 3582.535\n[67,] 2943.836 3368.875 3827.155\n[68,] 1236.836 1467.442 1735.573\n[69,] 2226.053 2502.088 2830.382\n[70,] 1971.899 2167.275 2373.027\n[71,] 2338.638 2849.919 3353.132\n[72,] 2644.682 2902.600 3178.351\n[73,] 2034.379 2220.764 2412.259\n[74,] 2234.723 2437.686 2670.624\n[75,] 1531.289 1729.489 1923.916\n[76,] 1464.843 1703.745 1929.716\n[77,] 2832.774 3070.627 3311.516\n[78,] 2859.156 3156.651 3725.826\n[79,] 1077.987 1383.594 1732.936\n[80,] 2570.563 2865.992 3272.796\n[81,] 2086.378 2316.107 2514.098\n[82,] 2683.377 3061.010 3363.845\n[83,] 1385.736 1629.635 1899.458\n[84,] 3105.819 3611.036 4016.156\n[85,] 2608.521 2957.983 3288.563\n[86,] 1534.063 1708.330 1868.706\n[87,] 1519.443 1787.883 2056.618\n[88,] 3019.338 3243.381 3471.321\n[89,] 3181.271 3487.279 3874.731\n[90,] 3104.158 3315.270 3550.471\n\n#make it a dataframe to plot\npreds_df &lt;- data.frame(\n  Observed = train_data$Y,\n  Original_Pred = predict(m2, newdata = train_data),  # Original model predictions\n  Lower_CI = preds[, 1],  # Lower confidence interval\n  Median_CI = preds[, 2],  # Median\n  Upper_CI = preds[, 3]   # Upper confidence interval\n)\n\n#plot observed vs. predictions with CIs\nggplot(preds_df, aes(x = Observed)) +\n  geom_point(aes(y = Original_Pred), color = \"skyblue3\", shape = 16) + #original predictions\n  geom_point(aes(y = Median_CI), color = \"navy\", shape = 16) + #median predictions\n  geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), color = \"firebrick\", width = 0.1, alpha=0.6) + #CIs\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"gray50\") + #45-degree line\n  labs(x = \"Observed\", y = \"Predicted\") +\n  theme_minimal() +\n  coord_cartesian(xlim = c(0, 5000), ylim = c(0, 5000)) #axes go from 0 to 5000"
  }
]